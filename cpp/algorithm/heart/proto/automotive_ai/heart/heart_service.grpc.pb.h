// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: automotive_ai/heart/heart_service.proto
#ifndef GRPC_automotive_5fai_2fheart_2fheart_5fservice_2eproto__INCLUDED
#define GRPC_automotive_5fai_2fheart_2fheart_5fservice_2eproto__INCLUDED

#include "automotive_ai/heart/heart_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace automotive_ai {
namespace heart {

class Heart final {
 public:
  static constexpr char const* service_full_name() {
    return "automotive_ai.heart.Heart";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Report(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::automotive_ai::heart::ReportRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>> AsyncReport(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>>(AsyncReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>> PrepareAsyncReport(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>>(PrepareAsyncReportRaw(context, request, cq));
    }
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::automotive_ai::heart::InitRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>> AsyncInit(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>> PrepareAsyncInit(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>>(PrepareAsyncInitRaw(context, request, cq));
    }
    virtual ::grpc::Status Serve(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::automotive_ai::heart::ServeRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>> AsyncServe(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>>(AsyncServeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>> PrepareAsyncServe(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>>(PrepareAsyncServeRaw(context, request, cq));
    }
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::automotive_ai::heart::ConnectRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>> AsyncConnect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::automotive_ai::heart::StartRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>> AsyncStart(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>> PrepareAsyncStart(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>>(PrepareAsyncStartRaw(context, request, cq));
    }
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::automotive_ai::heart::StepRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>> AsyncStep(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>> PrepareAsyncStep(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>>(PrepareAsyncStepRaw(context, request, cq));
    }
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::automotive_ai::heart::StopRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>> AsyncStop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>> PrepareAsyncStop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Report(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq* request, ::automotive_ai::heart::ReportRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Report(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ReportRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Report(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq* request, ::automotive_ai::heart::ReportRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Report(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ReportRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq* request, ::automotive_ai::heart::InitRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::InitRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq* request, ::automotive_ai::heart::InitRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::InitRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Serve(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq* request, ::automotive_ai::heart::ServeRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Serve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ServeRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Serve(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq* request, ::automotive_ai::heart::ServeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Serve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ServeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq* request, ::automotive_ai::heart::ConnectRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ConnectRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq* request, ::automotive_ai::heart::ConnectRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ConnectRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq* request, ::automotive_ai::heart::StartRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StartRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq* request, ::automotive_ai::heart::StartRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StartRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq* request, ::automotive_ai::heart::StepRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StepRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq* request, ::automotive_ai::heart::StepRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StepRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq* request, ::automotive_ai::heart::StopRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StopRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq* request, ::automotive_ai::heart::StopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>* AsyncReportRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>* PrepareAsyncReportRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>* AsyncInitRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>* AsyncServeRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>* PrepareAsyncServeRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>* AsyncConnectRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>* AsyncStartRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>* AsyncStepRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>* AsyncStopRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Report(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::automotive_ai::heart::ReportRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ReportRes>> AsyncReport(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ReportRes>>(AsyncReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ReportRes>> PrepareAsyncReport(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ReportRes>>(PrepareAsyncReportRaw(context, request, cq));
    }
    ::grpc::Status Init(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::automotive_ai::heart::InitRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::InitRes>> AsyncInit(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::InitRes>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::InitRes>> PrepareAsyncInit(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::InitRes>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status Serve(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::automotive_ai::heart::ServeRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ServeRes>> AsyncServe(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ServeRes>>(AsyncServeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ServeRes>> PrepareAsyncServe(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ServeRes>>(PrepareAsyncServeRaw(context, request, cq));
    }
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::automotive_ai::heart::ConnectRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ConnectRes>> AsyncConnect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ConnectRes>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ConnectRes>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ConnectRes>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    ::grpc::Status Start(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::automotive_ai::heart::StartRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StartRes>> AsyncStart(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StartRes>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StartRes>> PrepareAsyncStart(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StartRes>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Step(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::automotive_ai::heart::StepRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StepRes>> AsyncStep(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StepRes>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StepRes>> PrepareAsyncStep(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StepRes>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::automotive_ai::heart::StopRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StopRes>> AsyncStop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StopRes>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StopRes>> PrepareAsyncStop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StopRes>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Report(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq* request, ::automotive_ai::heart::ReportRes* response, std::function<void(::grpc::Status)>) override;
      void Report(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ReportRes* response, std::function<void(::grpc::Status)>) override;
      void Report(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq* request, ::automotive_ai::heart::ReportRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Report(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ReportRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Init(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq* request, ::automotive_ai::heart::InitRes* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::InitRes* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq* request, ::automotive_ai::heart::InitRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Init(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::InitRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Serve(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq* request, ::automotive_ai::heart::ServeRes* response, std::function<void(::grpc::Status)>) override;
      void Serve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ServeRes* response, std::function<void(::grpc::Status)>) override;
      void Serve(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq* request, ::automotive_ai::heart::ServeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Serve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ServeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Connect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq* request, ::automotive_ai::heart::ConnectRes* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ConnectRes* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq* request, ::automotive_ai::heart::ConnectRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::ConnectRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Start(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq* request, ::automotive_ai::heart::StartRes* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StartRes* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq* request, ::automotive_ai::heart::StartRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StartRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq* request, ::automotive_ai::heart::StepRes* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StepRes* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq* request, ::automotive_ai::heart::StepRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StepRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq* request, ::automotive_ai::heart::StopRes* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StopRes* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq* request, ::automotive_ai::heart::StopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::heart::StopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ReportRes>* AsyncReportRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ReportRes>* PrepareAsyncReportRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::InitRes>* AsyncInitRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::InitRes>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ServeRes>* AsyncServeRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ServeRes>* PrepareAsyncServeRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ConnectRes>* AsyncConnectRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::ConnectRes>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StartRes>* AsyncStartRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StartRes>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StepRes>* AsyncStepRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StepRes>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StopRes>* AsyncStopRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::heart::StopRes>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Report_;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_Serve_;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Report(::grpc::ServerContext* context, const ::automotive_ai::heart::ReportReq* request, ::automotive_ai::heart::ReportRes* response);
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::automotive_ai::heart::InitReq* request, ::automotive_ai::heart::InitRes* response);
    virtual ::grpc::Status Serve(::grpc::ServerContext* context, const ::automotive_ai::heart::ServeReq* request, ::automotive_ai::heart::ServeRes* response);
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::automotive_ai::heart::ConnectReq* request, ::automotive_ai::heart::ConnectRes* response);
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::automotive_ai::heart::StartReq* request, ::automotive_ai::heart::StartRes* response);
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::automotive_ai::heart::StepReq* request, ::automotive_ai::heart::StepRes* response);
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::automotive_ai::heart::StopReq* request, ::automotive_ai::heart::StopRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Report() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ReportReq* /*request*/, ::automotive_ai::heart::ReportRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReport(::grpc::ServerContext* context, ::automotive_ai::heart::ReportReq* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::heart::ReportRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::InitReq* /*request*/, ::automotive_ai::heart::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::automotive_ai::heart::InitReq* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::heart::InitRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Serve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Serve() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Serve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Serve(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ServeReq* /*request*/, ::automotive_ai::heart::ServeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServe(::grpc::ServerContext* context, ::automotive_ai::heart::ServeReq* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::heart::ServeRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ConnectReq* /*request*/, ::automotive_ai::heart::ConnectRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::automotive_ai::heart::ConnectReq* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::heart::ConnectRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StartReq* /*request*/, ::automotive_ai::heart::StartRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::automotive_ai::heart::StartReq* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::heart::StartRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StepReq* /*request*/, ::automotive_ai::heart::StepRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::automotive_ai::heart::StepReq* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::heart::StepRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StopReq* /*request*/, ::automotive_ai::heart::StopRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::automotive_ai::heart::StopReq* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::heart::StopRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Report<WithAsyncMethod_Init<WithAsyncMethod_Serve<WithAsyncMethod_Connect<WithAsyncMethod_Start<WithAsyncMethod_Step<WithAsyncMethod_Stop<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Report() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::ReportReq, ::automotive_ai::heart::ReportRes>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::heart::ReportReq* request,
                 ::automotive_ai::heart::ReportRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Report(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Report(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::heart::ReportReq, ::automotive_ai::heart::ReportRes>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::ReportReq, ::automotive_ai::heart::ReportRes>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ReportReq* /*request*/, ::automotive_ai::heart::ReportRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Report(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ReportReq* /*request*/, ::automotive_ai::heart::ReportRes* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Init() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::InitReq, ::automotive_ai::heart::InitRes>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::heart::InitReq* request,
                 ::automotive_ai::heart::InitRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Init(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Init(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::heart::InitReq, ::automotive_ai::heart::InitRes>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::InitReq, ::automotive_ai::heart::InitRes>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::InitReq* /*request*/, ::automotive_ai::heart::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Init(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::InitReq* /*request*/, ::automotive_ai::heart::InitRes* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Serve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Serve() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::ServeReq, ::automotive_ai::heart::ServeRes>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::heart::ServeReq* request,
                 ::automotive_ai::heart::ServeRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Serve(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Serve(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::heart::ServeReq, ::automotive_ai::heart::ServeRes>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::ServeReq, ::automotive_ai::heart::ServeRes>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Serve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Serve(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ServeReq* /*request*/, ::automotive_ai::heart::ServeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Serve(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ServeReq* /*request*/, ::automotive_ai::heart::ServeRes* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::ConnectReq, ::automotive_ai::heart::ConnectRes>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::heart::ConnectReq* request,
                 ::automotive_ai::heart::ConnectRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Connect(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Connect(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::heart::ConnectReq, ::automotive_ai::heart::ConnectRes>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::ConnectReq, ::automotive_ai::heart::ConnectRes>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ConnectReq* /*request*/, ::automotive_ai::heart::ConnectRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Connect(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ConnectReq* /*request*/, ::automotive_ai::heart::ConnectRes* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::StartReq, ::automotive_ai::heart::StartRes>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::heart::StartReq* request,
                 ::automotive_ai::heart::StartRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Start(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Start(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::heart::StartReq, ::automotive_ai::heart::StartRes>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::StartReq, ::automotive_ai::heart::StartRes>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StartReq* /*request*/, ::automotive_ai::heart::StartRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StartReq* /*request*/, ::automotive_ai::heart::StartRes* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::StepReq, ::automotive_ai::heart::StepRes>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::heart::StepReq* request,
                 ::automotive_ai::heart::StepRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Step(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Step(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::heart::StepReq, ::automotive_ai::heart::StepRes>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::StepReq, ::automotive_ai::heart::StepRes>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StepReq* /*request*/, ::automotive_ai::heart::StepRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StepReq* /*request*/, ::automotive_ai::heart::StepRes* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::StopReq, ::automotive_ai::heart::StopRes>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::heart::StopReq* request,
                 ::automotive_ai::heart::StopRes* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stop(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Stop(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::heart::StopReq, ::automotive_ai::heart::StopRes>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::heart::StopReq, ::automotive_ai::heart::StopRes>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StopReq* /*request*/, ::automotive_ai::heart::StopRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StopReq* /*request*/, ::automotive_ai::heart::StopRes* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Report<ExperimentalWithCallbackMethod_Init<ExperimentalWithCallbackMethod_Serve<ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_Start<ExperimentalWithCallbackMethod_Step<ExperimentalWithCallbackMethod_Stop<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Report() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ReportReq* /*request*/, ::automotive_ai::heart::ReportRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::InitReq* /*request*/, ::automotive_ai::heart::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Serve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Serve() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Serve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Serve(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ServeReq* /*request*/, ::automotive_ai::heart::ServeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ConnectReq* /*request*/, ::automotive_ai::heart::ConnectRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StartReq* /*request*/, ::automotive_ai::heart::StartRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StepReq* /*request*/, ::automotive_ai::heart::StepRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StopReq* /*request*/, ::automotive_ai::heart::StopRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Report() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ReportReq* /*request*/, ::automotive_ai::heart::ReportRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::InitReq* /*request*/, ::automotive_ai::heart::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Serve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Serve() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Serve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Serve(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ServeReq* /*request*/, ::automotive_ai::heart::ServeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ConnectReq* /*request*/, ::automotive_ai::heart::ConnectRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StartReq* /*request*/, ::automotive_ai::heart::StartRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StepReq* /*request*/, ::automotive_ai::heart::StepRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StopReq* /*request*/, ::automotive_ai::heart::StopRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Report() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Report(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ReportReq* /*request*/, ::automotive_ai::heart::ReportRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Report(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Init() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Init(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::InitReq* /*request*/, ::automotive_ai::heart::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Init(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Serve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Serve() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Serve(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Serve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Serve(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ServeReq* /*request*/, ::automotive_ai::heart::ServeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Serve(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Connect(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ConnectReq* /*request*/, ::automotive_ai::heart::ConnectRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Connect(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Start(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StartReq* /*request*/, ::automotive_ai::heart::StartRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Step(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StepReq* /*request*/, ::automotive_ai::heart::StepRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StopReq* /*request*/, ::automotive_ai::heart::StopRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Report() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::heart::ReportReq, ::automotive_ai::heart::ReportRes>(std::bind(&WithStreamedUnaryMethod_Report<BaseClass>::StreamedReport, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Report(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ReportReq* /*request*/, ::automotive_ai::heart::ReportRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::heart::ReportReq,::automotive_ai::heart::ReportRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::heart::InitReq, ::automotive_ai::heart::InitRes>(std::bind(&WithStreamedUnaryMethod_Init<BaseClass>::StreamedInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::InitReq* /*request*/, ::automotive_ai::heart::InitRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::heart::InitReq,::automotive_ai::heart::InitRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Serve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Serve() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::heart::ServeReq, ::automotive_ai::heart::ServeRes>(std::bind(&WithStreamedUnaryMethod_Serve<BaseClass>::StreamedServe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Serve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Serve(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ServeReq* /*request*/, ::automotive_ai::heart::ServeRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::heart::ServeReq,::automotive_ai::heart::ServeRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::heart::ConnectReq, ::automotive_ai::heart::ConnectRes>(std::bind(&WithStreamedUnaryMethod_Connect<BaseClass>::StreamedConnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::ConnectReq* /*request*/, ::automotive_ai::heart::ConnectRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::heart::ConnectReq,::automotive_ai::heart::ConnectRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::heart::StartReq, ::automotive_ai::heart::StartRes>(std::bind(&WithStreamedUnaryMethod_Start<BaseClass>::StreamedStart, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StartReq* /*request*/, ::automotive_ai::heart::StartRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::heart::StartReq,::automotive_ai::heart::StartRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::heart::StepReq, ::automotive_ai::heart::StepRes>(std::bind(&WithStreamedUnaryMethod_Step<BaseClass>::StreamedStep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StepReq* /*request*/, ::automotive_ai::heart::StepRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::heart::StepReq,::automotive_ai::heart::StepRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::heart::StopReq, ::automotive_ai::heart::StopRes>(std::bind(&WithStreamedUnaryMethod_Stop<BaseClass>::StreamedStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::automotive_ai::heart::StopReq* /*request*/, ::automotive_ai::heart::StopRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::heart::StopReq,::automotive_ai::heart::StopRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Report<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Serve<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Stop<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Report<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Serve<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Stop<Service > > > > > > > StreamedService;
};

}  // namespace heart
}  // namespace automotive_ai


#endif  // GRPC_automotive_5fai_2fheart_2fheart_5fservice_2eproto__INCLUDED
