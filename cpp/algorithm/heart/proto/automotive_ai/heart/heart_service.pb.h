// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: automotive_ai/heart/heart_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_automotive_5fai_2fheart_2fheart_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_automotive_5fai_2fheart_2fheart_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_automotive_5fai_2fheart_2fheart_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
namespace automotive_ai {
namespace heart {
class ConnectReq;
class ConnectReqDefaultTypeInternal;
extern ConnectReqDefaultTypeInternal _ConnectReq_default_instance_;
class ConnectReq_MappingEntry_DoNotUse;
class ConnectReq_MappingEntry_DoNotUseDefaultTypeInternal;
extern ConnectReq_MappingEntry_DoNotUseDefaultTypeInternal _ConnectReq_MappingEntry_DoNotUse_default_instance_;
class ConnectRes;
class ConnectResDefaultTypeInternal;
extern ConnectResDefaultTypeInternal _ConnectRes_default_instance_;
class InitReq;
class InitReqDefaultTypeInternal;
extern InitReqDefaultTypeInternal _InitReq_default_instance_;
class InitRes;
class InitResDefaultTypeInternal;
extern InitResDefaultTypeInternal _InitRes_default_instance_;
class InitRes_ServicesEntry_DoNotUse;
class InitRes_ServicesEntry_DoNotUseDefaultTypeInternal;
extern InitRes_ServicesEntry_DoNotUseDefaultTypeInternal _InitRes_ServicesEntry_DoNotUse_default_instance_;
class InitRes_StubsEntry_DoNotUse;
class InitRes_StubsEntry_DoNotUseDefaultTypeInternal;
extern InitRes_StubsEntry_DoNotUseDefaultTypeInternal _InitRes_StubsEntry_DoNotUse_default_instance_;
class ReportReq;
class ReportReqDefaultTypeInternal;
extern ReportReqDefaultTypeInternal _ReportReq_default_instance_;
class ReportRes;
class ReportResDefaultTypeInternal;
extern ReportResDefaultTypeInternal _ReportRes_default_instance_;
class ServeReq;
class ServeReqDefaultTypeInternal;
extern ServeReqDefaultTypeInternal _ServeReq_default_instance_;
class ServeReq_MappingEntry_DoNotUse;
class ServeReq_MappingEntry_DoNotUseDefaultTypeInternal;
extern ServeReq_MappingEntry_DoNotUseDefaultTypeInternal _ServeReq_MappingEntry_DoNotUse_default_instance_;
class ServeRes;
class ServeResDefaultTypeInternal;
extern ServeResDefaultTypeInternal _ServeRes_default_instance_;
class StartReq;
class StartReqDefaultTypeInternal;
extern StartReqDefaultTypeInternal _StartReq_default_instance_;
class StartRes;
class StartResDefaultTypeInternal;
extern StartResDefaultTypeInternal _StartRes_default_instance_;
class StepReq;
class StepReqDefaultTypeInternal;
extern StepReqDefaultTypeInternal _StepReq_default_instance_;
class StepRes;
class StepResDefaultTypeInternal;
extern StepResDefaultTypeInternal _StepRes_default_instance_;
class StopReq;
class StopReqDefaultTypeInternal;
extern StopReqDefaultTypeInternal _StopReq_default_instance_;
class StopRes;
class StopResDefaultTypeInternal;
extern StopResDefaultTypeInternal _StopRes_default_instance_;
}  // namespace heart
}  // namespace automotive_ai
PROTOBUF_NAMESPACE_OPEN
template<> ::automotive_ai::heart::ConnectReq* Arena::CreateMaybeMessage<::automotive_ai::heart::ConnectReq>(Arena*);
template<> ::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse* Arena::CreateMaybeMessage<::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse>(Arena*);
template<> ::automotive_ai::heart::ConnectRes* Arena::CreateMaybeMessage<::automotive_ai::heart::ConnectRes>(Arena*);
template<> ::automotive_ai::heart::InitReq* Arena::CreateMaybeMessage<::automotive_ai::heart::InitReq>(Arena*);
template<> ::automotive_ai::heart::InitRes* Arena::CreateMaybeMessage<::automotive_ai::heart::InitRes>(Arena*);
template<> ::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage<::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse>(Arena*);
template<> ::automotive_ai::heart::InitRes_StubsEntry_DoNotUse* Arena::CreateMaybeMessage<::automotive_ai::heart::InitRes_StubsEntry_DoNotUse>(Arena*);
template<> ::automotive_ai::heart::ReportReq* Arena::CreateMaybeMessage<::automotive_ai::heart::ReportReq>(Arena*);
template<> ::automotive_ai::heart::ReportRes* Arena::CreateMaybeMessage<::automotive_ai::heart::ReportRes>(Arena*);
template<> ::automotive_ai::heart::ServeReq* Arena::CreateMaybeMessage<::automotive_ai::heart::ServeReq>(Arena*);
template<> ::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse* Arena::CreateMaybeMessage<::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse>(Arena*);
template<> ::automotive_ai::heart::ServeRes* Arena::CreateMaybeMessage<::automotive_ai::heart::ServeRes>(Arena*);
template<> ::automotive_ai::heart::StartReq* Arena::CreateMaybeMessage<::automotive_ai::heart::StartReq>(Arena*);
template<> ::automotive_ai::heart::StartRes* Arena::CreateMaybeMessage<::automotive_ai::heart::StartRes>(Arena*);
template<> ::automotive_ai::heart::StepReq* Arena::CreateMaybeMessage<::automotive_ai::heart::StepReq>(Arena*);
template<> ::automotive_ai::heart::StepRes* Arena::CreateMaybeMessage<::automotive_ai::heart::StepRes>(Arena*);
template<> ::automotive_ai::heart::StopReq* Arena::CreateMaybeMessage<::automotive_ai::heart::StopReq>(Arena*);
template<> ::automotive_ai::heart::StopRes* Arena::CreateMaybeMessage<::automotive_ai::heart::StopRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace automotive_ai {
namespace heart {

// ===================================================================

class ReportReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.ReportReq) */ {
 public:
  ReportReq();
  virtual ~ReportReq();

  ReportReq(const ReportReq& from);
  ReportReq(ReportReq&& from) noexcept
    : ReportReq() {
    *this = ::std::move(from);
  }

  inline ReportReq& operator=(const ReportReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportReq& operator=(ReportReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportReq* internal_default_instance() {
    return reinterpret_cast<const ReportReq*>(
               &_ReportReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportReq& a, ReportReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportReq* New() const final {
    return CreateMaybeMessage<ReportReq>(nullptr);
  }

  ReportReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportReq& from);
  void MergeFrom(const ReportReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.ReportReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.ReportReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReportRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.ReportRes) */ {
 public:
  ReportRes();
  virtual ~ReportRes();

  ReportRes(const ReportRes& from);
  ReportRes(ReportRes&& from) noexcept
    : ReportRes() {
    *this = ::std::move(from);
  }

  inline ReportRes& operator=(const ReportRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportRes& operator=(ReportRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportRes* internal_default_instance() {
    return reinterpret_cast<const ReportRes*>(
               &_ReportRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReportRes& a, ReportRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportRes* New() const final {
    return CreateMaybeMessage<ReportRes>(nullptr);
  }

  ReportRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportRes& from);
  void MergeFrom(const ReportRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.ReportRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.ReportRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InitReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.InitReq) */ {
 public:
  InitReq();
  virtual ~InitReq();

  InitReq(const InitReq& from);
  InitReq(InitReq&& from) noexcept
    : InitReq() {
    *this = ::std::move(from);
  }

  inline InitReq& operator=(const InitReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitReq& operator=(InitReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitReq* internal_default_instance() {
    return reinterpret_cast<const InitReq*>(
               &_InitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitReq& a, InitReq& b) {
    a.Swap(&b);
  }
  inline void Swap(InitReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitReq* New() const final {
    return CreateMaybeMessage<InitReq>(nullptr);
  }

  InitReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitReq& from);
  void MergeFrom(const InitReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.InitReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // string config = 1;
  void clear_config();
  const std::string& config() const;
  void set_config(const std::string& value);
  void set_config(std::string&& value);
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  std::string* mutable_config();
  std::string* release_config();
  void set_allocated_config(std::string* config);

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.InitReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InitRes_StubsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitRes_StubsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitRes_StubsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InitRes_StubsEntry_DoNotUse();
  InitRes_StubsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitRes_StubsEntry_DoNotUse& other);
  static const InitRes_StubsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitRes_StubsEntry_DoNotUse*>(&_InitRes_StubsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.InitRes.StubsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.InitRes.StubsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class InitRes_ServicesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitRes_ServicesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitRes_ServicesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InitRes_ServicesEntry_DoNotUse();
  InitRes_ServicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitRes_ServicesEntry_DoNotUse& other);
  static const InitRes_ServicesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitRes_ServicesEntry_DoNotUse*>(&_InitRes_ServicesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.InitRes.ServicesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.InitRes.ServicesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class InitRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.InitRes) */ {
 public:
  InitRes();
  virtual ~InitRes();

  InitRes(const InitRes& from);
  InitRes(InitRes&& from) noexcept
    : InitRes() {
    *this = ::std::move(from);
  }

  inline InitRes& operator=(const InitRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRes& operator=(InitRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitRes* internal_default_instance() {
    return reinterpret_cast<const InitRes*>(
               &_InitRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitRes& a, InitRes& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitRes* New() const final {
    return CreateMaybeMessage<InitRes>(nullptr);
  }

  InitRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitRes& from);
  void MergeFrom(const InitRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.InitRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStubsFieldNumber = 1,
    kServicesFieldNumber = 2,
  };
  // map<string, string> stubs = 1;
  int stubs_size() const;
  void clear_stubs();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      stubs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_stubs();

  // map<string, string> services = 2;
  int services_size() const;
  void clear_services();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      services() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_services();

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.InitRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InitRes_StubsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > stubs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InitRes_ServicesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > services_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServeReq_MappingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServeReq_MappingEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServeReq_MappingEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ServeReq_MappingEntry_DoNotUse();
  ServeReq_MappingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServeReq_MappingEntry_DoNotUse& other);
  static const ServeReq_MappingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServeReq_MappingEntry_DoNotUse*>(&_ServeReq_MappingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.ServeReq.MappingEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.ServeReq.MappingEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class ServeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.ServeReq) */ {
 public:
  ServeReq();
  virtual ~ServeReq();

  ServeReq(const ServeReq& from);
  ServeReq(ServeReq&& from) noexcept
    : ServeReq() {
    *this = ::std::move(from);
  }

  inline ServeReq& operator=(const ServeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServeReq& operator=(ServeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServeReq* internal_default_instance() {
    return reinterpret_cast<const ServeReq*>(
               &_ServeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServeReq& a, ServeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ServeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServeReq* New() const final {
    return CreateMaybeMessage<ServeReq>(nullptr);
  }

  ServeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServeReq& from);
  void MergeFrom(const ServeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.ServeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 1,
  };
  // map<string, string> mapping = 1;
  int mapping_size() const;
  void clear_mapping();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_mapping();

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.ServeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ServeReq_MappingEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > mapping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServeRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.ServeRes) */ {
 public:
  ServeRes();
  virtual ~ServeRes();

  ServeRes(const ServeRes& from);
  ServeRes(ServeRes&& from) noexcept
    : ServeRes() {
    *this = ::std::move(from);
  }

  inline ServeRes& operator=(const ServeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServeRes& operator=(ServeRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServeRes* internal_default_instance() {
    return reinterpret_cast<const ServeRes*>(
               &_ServeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServeRes& a, ServeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ServeRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServeRes* New() const final {
    return CreateMaybeMessage<ServeRes>(nullptr);
  }

  ServeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServeRes& from);
  void MergeFrom(const ServeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.ServeRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.ServeRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConnectReq_MappingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnectReq_MappingEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnectReq_MappingEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ConnectReq_MappingEntry_DoNotUse();
  ConnectReq_MappingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConnectReq_MappingEntry_DoNotUse& other);
  static const ConnectReq_MappingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnectReq_MappingEntry_DoNotUse*>(&_ConnectReq_MappingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.ConnectReq.MappingEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "automotive_ai.heart.ConnectReq.MappingEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class ConnectReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.ConnectReq) */ {
 public:
  ConnectReq();
  virtual ~ConnectReq();

  ConnectReq(const ConnectReq& from);
  ConnectReq(ConnectReq&& from) noexcept
    : ConnectReq() {
    *this = ::std::move(from);
  }

  inline ConnectReq& operator=(const ConnectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectReq& operator=(ConnectReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectReq* internal_default_instance() {
    return reinterpret_cast<const ConnectReq*>(
               &_ConnectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConnectReq& a, ConnectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectReq* New() const final {
    return CreateMaybeMessage<ConnectReq>(nullptr);
  }

  ConnectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectReq& from);
  void MergeFrom(const ConnectReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.ConnectReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 1,
  };
  // map<string, string> mapping = 1;
  int mapping_size() const;
  void clear_mapping();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_mapping();

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.ConnectReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ConnectReq_MappingEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > mapping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConnectRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.ConnectRes) */ {
 public:
  ConnectRes();
  virtual ~ConnectRes();

  ConnectRes(const ConnectRes& from);
  ConnectRes(ConnectRes&& from) noexcept
    : ConnectRes() {
    *this = ::std::move(from);
  }

  inline ConnectRes& operator=(const ConnectRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRes& operator=(ConnectRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRes* internal_default_instance() {
    return reinterpret_cast<const ConnectRes*>(
               &_ConnectRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ConnectRes& a, ConnectRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectRes* New() const final {
    return CreateMaybeMessage<ConnectRes>(nullptr);
  }

  ConnectRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectRes& from);
  void MergeFrom(const ConnectRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.ConnectRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.ConnectRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.StartReq) */ {
 public:
  StartReq();
  virtual ~StartReq();

  StartReq(const StartReq& from);
  StartReq(StartReq&& from) noexcept
    : StartReq() {
    *this = ::std::move(from);
  }

  inline StartReq& operator=(const StartReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartReq& operator=(StartReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartReq* internal_default_instance() {
    return reinterpret_cast<const StartReq*>(
               &_StartReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StartReq& a, StartReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StartReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartReq* New() const final {
    return CreateMaybeMessage<StartReq>(nullptr);
  }

  StartReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartReq& from);
  void MergeFrom(const StartReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.StartReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.StartReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.StartRes) */ {
 public:
  StartRes();
  virtual ~StartRes();

  StartRes(const StartRes& from);
  StartRes(StartRes&& from) noexcept
    : StartRes() {
    *this = ::std::move(from);
  }

  inline StartRes& operator=(const StartRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRes& operator=(StartRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRes* internal_default_instance() {
    return reinterpret_cast<const StartRes*>(
               &_StartRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StartRes& a, StartRes& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRes* New() const final {
    return CreateMaybeMessage<StartRes>(nullptr);
  }

  StartRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartRes& from);
  void MergeFrom(const StartRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.StartRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.StartRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StepReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.StepReq) */ {
 public:
  StepReq();
  virtual ~StepReq();

  StepReq(const StepReq& from);
  StepReq(StepReq&& from) noexcept
    : StepReq() {
    *this = ::std::move(from);
  }

  inline StepReq& operator=(const StepReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepReq& operator=(StepReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepReq* internal_default_instance() {
    return reinterpret_cast<const StepReq*>(
               &_StepReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StepReq& a, StepReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StepReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepReq* New() const final {
    return CreateMaybeMessage<StepReq>(nullptr);
  }

  StepReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepReq& from);
  void MergeFrom(const StepReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.StepReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStampFieldNumber = 1,
  };
  // uint64 stamp = 1;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.StepReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StepRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.StepRes) */ {
 public:
  StepRes();
  virtual ~StepRes();

  StepRes(const StepRes& from);
  StepRes(StepRes&& from) noexcept
    : StepRes() {
    *this = ::std::move(from);
  }

  inline StepRes& operator=(const StepRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepRes& operator=(StepRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepRes* internal_default_instance() {
    return reinterpret_cast<const StepRes*>(
               &_StepRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StepRes& a, StepRes& b) {
    a.Swap(&b);
  }
  inline void Swap(StepRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepRes* New() const final {
    return CreateMaybeMessage<StepRes>(nullptr);
  }

  StepRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepRes& from);
  void MergeFrom(const StepRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.StepRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnoughPleaseStopFieldNumber = 1,
  };
  // bool enough_please_stop = 1;
  void clear_enough_please_stop();
  bool enough_please_stop() const;
  void set_enough_please_stop(bool value);

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.StepRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enough_please_stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StopReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.StopReq) */ {
 public:
  StopReq();
  virtual ~StopReq();

  StopReq(const StopReq& from);
  StopReq(StopReq&& from) noexcept
    : StopReq() {
    *this = ::std::move(from);
  }

  inline StopReq& operator=(const StopReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopReq& operator=(StopReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopReq* internal_default_instance() {
    return reinterpret_cast<const StopReq*>(
               &_StopReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StopReq& a, StopReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StopReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopReq* New() const final {
    return CreateMaybeMessage<StopReq>(nullptr);
  }

  StopReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopReq& from);
  void MergeFrom(const StopReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.StopReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.StopReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StopRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.heart.StopRes) */ {
 public:
  StopRes();
  virtual ~StopRes();

  StopRes(const StopRes& from);
  StopRes(StopRes&& from) noexcept
    : StopRes() {
    *this = ::std::move(from);
  }

  inline StopRes& operator=(const StopRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRes& operator=(StopRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRes* internal_default_instance() {
    return reinterpret_cast<const StopRes*>(
               &_StopRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StopRes& a, StopRes& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRes* New() const final {
    return CreateMaybeMessage<StopRes>(nullptr);
  }

  StopRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRes& from);
  void MergeFrom(const StopRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.heart.StopRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto);
    return ::descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:automotive_ai.heart.StopRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportReq

// string content = 1;
inline void ReportReq::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReportReq::content() const {
  // @@protoc_insertion_point(field_get:automotive_ai.heart.ReportReq.content)
  return content_.GetNoArena();
}
inline void ReportReq::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:automotive_ai.heart.ReportReq.content)
}
inline void ReportReq::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:automotive_ai.heart.ReportReq.content)
}
inline void ReportReq::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:automotive_ai.heart.ReportReq.content)
}
inline void ReportReq::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:automotive_ai.heart.ReportReq.content)
}
inline std::string* ReportReq::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:automotive_ai.heart.ReportReq.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportReq::release_content() {
  // @@protoc_insertion_point(field_release:automotive_ai.heart.ReportReq.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportReq::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:automotive_ai.heart.ReportReq.content)
}

// -------------------------------------------------------------------

// ReportRes

// string content = 1;
inline void ReportRes::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReportRes::content() const {
  // @@protoc_insertion_point(field_get:automotive_ai.heart.ReportRes.content)
  return content_.GetNoArena();
}
inline void ReportRes::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:automotive_ai.heart.ReportRes.content)
}
inline void ReportRes::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:automotive_ai.heart.ReportRes.content)
}
inline void ReportRes::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:automotive_ai.heart.ReportRes.content)
}
inline void ReportRes::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:automotive_ai.heart.ReportRes.content)
}
inline std::string* ReportRes::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:automotive_ai.heart.ReportRes.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReportRes::release_content() {
  // @@protoc_insertion_point(field_release:automotive_ai.heart.ReportRes.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRes::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:automotive_ai.heart.ReportRes.content)
}

// -------------------------------------------------------------------

// InitReq

// string config = 1;
inline void InitReq::clear_config() {
  config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InitReq::config() const {
  // @@protoc_insertion_point(field_get:automotive_ai.heart.InitReq.config)
  return config_.GetNoArena();
}
inline void InitReq::set_config(const std::string& value) {
  
  config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:automotive_ai.heart.InitReq.config)
}
inline void InitReq::set_config(std::string&& value) {
  
  config_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:automotive_ai.heart.InitReq.config)
}
inline void InitReq::set_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:automotive_ai.heart.InitReq.config)
}
inline void InitReq::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:automotive_ai.heart.InitReq.config)
}
inline std::string* InitReq::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:automotive_ai.heart.InitReq.config)
  return config_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InitReq::release_config() {
  // @@protoc_insertion_point(field_release:automotive_ai.heart.InitReq.config)
  
  return config_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InitReq::set_allocated_config(std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:automotive_ai.heart.InitReq.config)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InitRes

// map<string, string> stubs = 1;
inline int InitRes::stubs_size() const {
  return stubs_.size();
}
inline void InitRes::clear_stubs() {
  stubs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitRes::stubs() const {
  // @@protoc_insertion_point(field_map:automotive_ai.heart.InitRes.stubs)
  return stubs_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitRes::mutable_stubs() {
  // @@protoc_insertion_point(field_mutable_map:automotive_ai.heart.InitRes.stubs)
  return stubs_.MutableMap();
}

// map<string, string> services = 2;
inline int InitRes::services_size() const {
  return services_.size();
}
inline void InitRes::clear_services() {
  services_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitRes::services() const {
  // @@protoc_insertion_point(field_map:automotive_ai.heart.InitRes.services)
  return services_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitRes::mutable_services() {
  // @@protoc_insertion_point(field_mutable_map:automotive_ai.heart.InitRes.services)
  return services_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServeReq

// map<string, string> mapping = 1;
inline int ServeReq::mapping_size() const {
  return mapping_.size();
}
inline void ServeReq::clear_mapping() {
  mapping_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ServeReq::mapping() const {
  // @@protoc_insertion_point(field_map:automotive_ai.heart.ServeReq.mapping)
  return mapping_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ServeReq::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_map:automotive_ai.heart.ServeReq.mapping)
  return mapping_.MutableMap();
}

// -------------------------------------------------------------------

// ServeRes

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConnectReq

// map<string, string> mapping = 1;
inline int ConnectReq::mapping_size() const {
  return mapping_.size();
}
inline void ConnectReq::clear_mapping() {
  mapping_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ConnectReq::mapping() const {
  // @@protoc_insertion_point(field_map:automotive_ai.heart.ConnectReq.mapping)
  return mapping_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ConnectReq::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_map:automotive_ai.heart.ConnectReq.mapping)
  return mapping_.MutableMap();
}

// -------------------------------------------------------------------

// ConnectRes

// -------------------------------------------------------------------

// StartReq

// -------------------------------------------------------------------

// StartRes

// -------------------------------------------------------------------

// StepReq

// uint64 stamp = 1;
inline void StepReq::clear_stamp() {
  stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StepReq::stamp() const {
  // @@protoc_insertion_point(field_get:automotive_ai.heart.StepReq.stamp)
  return stamp_;
}
inline void StepReq::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.heart.StepReq.stamp)
}

// -------------------------------------------------------------------

// StepRes

// bool enough_please_stop = 1;
inline void StepRes::clear_enough_please_stop() {
  enough_please_stop_ = false;
}
inline bool StepRes::enough_please_stop() const {
  // @@protoc_insertion_point(field_get:automotive_ai.heart.StepRes.enough_please_stop)
  return enough_please_stop_;
}
inline void StepRes::set_enough_please_stop(bool value) {
  
  enough_please_stop_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.heart.StepRes.enough_please_stop)
}

// -------------------------------------------------------------------

// StopReq

// -------------------------------------------------------------------

// StopRes

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace heart
}  // namespace automotive_ai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_automotive_5fai_2fheart_2fheart_5fservice_2eproto
