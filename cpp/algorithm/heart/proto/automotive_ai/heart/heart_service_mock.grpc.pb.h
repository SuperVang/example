// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: automotive_ai/heart/heart_service.proto

#include "automotive_ai/heart/heart_service.pb.h"
#include "automotive_ai/heart/heart_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace automotive_ai {
namespace heart {

class MockHeartStub : public Heart::StubInterface {
 public:
  MOCK_METHOD3(Report, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::automotive_ai::heart::ReportRes* response));
  MOCK_METHOD3(AsyncReportRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncReportRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ReportRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::ReportReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Init, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::automotive_ai::heart::InitRes* response));
  MOCK_METHOD3(AsyncInitRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncInitRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::InitRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::InitReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Serve, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::automotive_ai::heart::ServeRes* response));
  MOCK_METHOD3(AsyncServeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncServeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ServeRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::ServeReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Connect, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::automotive_ai::heart::ConnectRes* response));
  MOCK_METHOD3(AsyncConnectRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncConnectRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::ConnectRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::ConnectReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Start, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::automotive_ai::heart::StartRes* response));
  MOCK_METHOD3(AsyncStartRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStartRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StartRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::StartReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Step, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::automotive_ai::heart::StepRes* response));
  MOCK_METHOD3(AsyncStepRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStepRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StepRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::StepReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Stop, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::automotive_ai::heart::StopRes* response));
  MOCK_METHOD3(AsyncStopRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStopRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::heart::StopRes>*(::grpc::ClientContext* context, const ::automotive_ai::heart::StopReq& request, ::grpc::CompletionQueue* cq));
};

} // namespace automotive_ai
} // namespace heart

