// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: automotive_ai/heart/heart_service.proto

#include "automotive_ai/heart/heart_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_automotive_5fai_2fheart_2fheart_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_automotive_5fai_2fheart_2fheart_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitRes_ServicesEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_automotive_5fai_2fheart_2fheart_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitRes_StubsEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_automotive_5fai_2fheart_2fheart_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServeReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto;
namespace automotive_ai {
namespace heart {
class ReportReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportReq> _instance;
} _ReportReq_default_instance_;
class ReportResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportRes> _instance;
} _ReportRes_default_instance_;
class InitReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitReq> _instance;
} _InitReq_default_instance_;
class InitRes_StubsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitRes_StubsEntry_DoNotUse> _instance;
} _InitRes_StubsEntry_DoNotUse_default_instance_;
class InitRes_ServicesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitRes_ServicesEntry_DoNotUse> _instance;
} _InitRes_ServicesEntry_DoNotUse_default_instance_;
class InitResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitRes> _instance;
} _InitRes_default_instance_;
class ServeReq_MappingEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServeReq_MappingEntry_DoNotUse> _instance;
} _ServeReq_MappingEntry_DoNotUse_default_instance_;
class ServeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServeReq> _instance;
} _ServeReq_default_instance_;
class ServeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServeRes> _instance;
} _ServeRes_default_instance_;
class ConnectReq_MappingEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectReq_MappingEntry_DoNotUse> _instance;
} _ConnectReq_MappingEntry_DoNotUse_default_instance_;
class ConnectReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectReq> _instance;
} _ConnectReq_default_instance_;
class ConnectResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectRes> _instance;
} _ConnectRes_default_instance_;
class StartReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartReq> _instance;
} _StartReq_default_instance_;
class StartResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRes> _instance;
} _StartRes_default_instance_;
class StepReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StepReq> _instance;
} _StepReq_default_instance_;
class StepResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StepRes> _instance;
} _StepRes_default_instance_;
class StopReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopReq> _instance;
} _StopReq_default_instance_;
class StopResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRes> _instance;
} _StopRes_default_instance_;
}  // namespace heart
}  // namespace automotive_ai
static void InitDefaultsscc_info_ConnectReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ConnectReq_default_instance_;
    new (ptr) ::automotive_ai::heart::ConnectReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::ConnectReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConnectReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {
      &scc_info_ConnectReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ConnectReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ConnectReq_MappingEntry_DoNotUse_default_instance_;
    new (ptr) ::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse();
  }
  ::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConnectReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ConnectRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ConnectRes_default_instance_;
    new (ptr) ::automotive_ai::heart::ConnectRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::ConnectRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConnectRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InitReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_InitReq_default_instance_;
    new (ptr) ::automotive_ai::heart::InitReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::InitReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InitReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InitRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_InitRes_default_instance_;
    new (ptr) ::automotive_ai::heart::InitRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::InitRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_InitRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {
      &scc_info_InitRes_StubsEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
      &scc_info_InitRes_ServicesEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_InitRes_ServicesEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_InitRes_ServicesEntry_DoNotUse_default_instance_;
    new (ptr) ::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse();
  }
  ::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitRes_ServicesEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InitRes_ServicesEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InitRes_StubsEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_InitRes_StubsEntry_DoNotUse_default_instance_;
    new (ptr) ::automotive_ai::heart::InitRes_StubsEntry_DoNotUse();
  }
  ::automotive_ai::heart::InitRes_StubsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitRes_StubsEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InitRes_StubsEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ReportReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ReportReq_default_instance_;
    new (ptr) ::automotive_ai::heart::ReportReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::ReportReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReportReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ReportRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ReportRes_default_instance_;
    new (ptr) ::automotive_ai::heart::ReportRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::ReportRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReportRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ServeReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ServeReq_default_instance_;
    new (ptr) ::automotive_ai::heart::ServeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::ServeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServeReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServeReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {
      &scc_info_ServeReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ServeReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ServeReq_MappingEntry_DoNotUse_default_instance_;
    new (ptr) ::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse();
  }
  ::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServeReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServeReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ServeRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_ServeRes_default_instance_;
    new (ptr) ::automotive_ai::heart::ServeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::ServeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServeRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServeRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_StartReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_StartReq_default_instance_;
    new (ptr) ::automotive_ai::heart::StartReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::StartReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StartReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_StartRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_StartRes_default_instance_;
    new (ptr) ::automotive_ai::heart::StartRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::StartRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StartRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_StepReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_StepReq_default_instance_;
    new (ptr) ::automotive_ai::heart::StepReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::StepReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StepReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_StepRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_StepRes_default_instance_;
    new (ptr) ::automotive_ai::heart::StepRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::StepRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StepRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_StopReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_StopReq_default_instance_;
    new (ptr) ::automotive_ai::heart::StopReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::StopReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_StopRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::heart::_StopRes_default_instance_;
    new (ptr) ::automotive_ai::heart::StopRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::heart::StopRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_automotive_5fai_2fheart_2fheart_5fservice_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_automotive_5fai_2fheart_2fheart_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_automotive_5fai_2fheart_2fheart_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ReportReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ReportReq, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ReportRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ReportRes, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitReq, config_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_StubsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_StubsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_StubsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_StubsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes, stubs_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::InitRes, services_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ServeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ServeReq, mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ServeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ConnectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ConnectReq, mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::ConnectRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StartRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StepReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StepReq, stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StepRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StepRes, enough_please_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::heart::StopRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::automotive_ai::heart::ReportReq)},
  { 6, -1, sizeof(::automotive_ai::heart::ReportRes)},
  { 12, -1, sizeof(::automotive_ai::heart::InitReq)},
  { 18, 25, sizeof(::automotive_ai::heart::InitRes_StubsEntry_DoNotUse)},
  { 27, 34, sizeof(::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse)},
  { 36, -1, sizeof(::automotive_ai::heart::InitRes)},
  { 43, 50, sizeof(::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse)},
  { 52, -1, sizeof(::automotive_ai::heart::ServeReq)},
  { 58, -1, sizeof(::automotive_ai::heart::ServeRes)},
  { 63, 70, sizeof(::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse)},
  { 72, -1, sizeof(::automotive_ai::heart::ConnectReq)},
  { 78, -1, sizeof(::automotive_ai::heart::ConnectRes)},
  { 83, -1, sizeof(::automotive_ai::heart::StartReq)},
  { 88, -1, sizeof(::automotive_ai::heart::StartRes)},
  { 93, -1, sizeof(::automotive_ai::heart::StepReq)},
  { 99, -1, sizeof(::automotive_ai::heart::StepRes)},
  { 105, -1, sizeof(::automotive_ai::heart::StopReq)},
  { 110, -1, sizeof(::automotive_ai::heart::StopRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ReportReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ReportRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_InitReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_InitRes_StubsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_InitRes_ServicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_InitRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ServeReq_MappingEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ServeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ServeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ConnectReq_MappingEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ConnectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_ConnectRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_StartReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_StartRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_StepReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_StepRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_StopReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::heart::_StopRes_default_instance_),
};

const char descriptor_table_protodef_automotive_5fai_2fheart_2fheart_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'automotive_ai/heart/heart_service.prot"
  "o\022\023automotive_ai.heart\"\034\n\tReportReq\022\017\n\007c"
  "ontent\030\001 \001(\t\"\034\n\tReportRes\022\017\n\007content\030\001 \001"
  "(\t\"\031\n\007InitReq\022\016\n\006config\030\001 \001(\t\"\336\001\n\007InitRe"
  "s\0226\n\005stubs\030\001 \003(\0132\'.automotive_ai.heart.I"
  "nitRes.StubsEntry\022<\n\010services\030\002 \003(\0132*.au"
  "tomotive_ai.heart.InitRes.ServicesEntry\032"
  ",\n\nStubsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001\032/\n\rServicesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\"w\n\010ServeReq\022;\n\007mapping\030\001 "
  "\003(\0132*.automotive_ai.heart.ServeReq.Mappi"
  "ngEntry\032.\n\014MappingEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"\n\n\010ServeRes\"{\n\nConnectRe"
  "q\022=\n\007mapping\030\001 \003(\0132,.automotive_ai.heart"
  ".ConnectReq.MappingEntry\032.\n\014MappingEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\014\n\nConn"
  "ectRes\"\n\n\010StartReq\"\n\n\010StartRes\"\030\n\007StepRe"
  "q\022\r\n\005stamp\030\001 \001(\004\"%\n\007StepRes\022\032\n\022enough_pl"
  "ease_stop\030\001 \001(\010\"\t\n\007StopReq\"\t\n\007StopRes2\206\004"
  "\n\005Heart\022J\n\006Report\022\036.automotive_ai.heart."
  "ReportReq\032\036.automotive_ai.heart.ReportRe"
  "s\"\000\022D\n\004Init\022\034.automotive_ai.heart.InitRe"
  "q\032\034.automotive_ai.heart.InitRes\"\000\022G\n\005Ser"
  "ve\022\035.automotive_ai.heart.ServeReq\032\035.auto"
  "motive_ai.heart.ServeRes\"\000\022M\n\007Connect\022\037."
  "automotive_ai.heart.ConnectReq\032\037.automot"
  "ive_ai.heart.ConnectRes\"\000\022G\n\005Start\022\035.aut"
  "omotive_ai.heart.StartReq\032\035.automotive_a"
  "i.heart.StartRes\"\000\022D\n\004Step\022\034.automotive_"
  "ai.heart.StepReq\032\034.automotive_ai.heart.S"
  "tepRes\"\000\022D\n\004Stop\022\034.automotive_ai.heart.S"
  "topReq\032\034.automotive_ai.heart.StopRes\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_sccs[18] = {
  &scc_info_ConnectReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_ConnectReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_ConnectRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_InitReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_InitRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_InitRes_ServicesEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_InitRes_StubsEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_ReportReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_ReportRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_ServeReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_ServeReq_MappingEntry_DoNotUse_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_ServeRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_StartReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_StartRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_StepReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_StepRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_StopReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
  &scc_info_StopRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_once;
static bool descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto = {
  &descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_initialized, descriptor_table_protodef_automotive_5fai_2fheart_2fheart_5fservice_2eproto, "automotive_ai/heart/heart_service.proto", 1286,
  &descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_once, descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_sccs, descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_automotive_5fai_2fheart_2fheart_5fservice_2eproto::offsets,
  file_level_metadata_automotive_5fai_2fheart_2fheart_5fservice_2eproto, 18, file_level_enum_descriptors_automotive_5fai_2fheart_2fheart_5fservice_2eproto, file_level_service_descriptors_automotive_5fai_2fheart_2fheart_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_automotive_5fai_2fheart_2fheart_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_automotive_5fai_2fheart_2fheart_5fservice_2eproto), true);
namespace automotive_ai {
namespace heart {

// ===================================================================

void ReportReq::InitAsDefaultInstance() {
}
class ReportReq::_Internal {
 public:
};

ReportReq::ReportReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.ReportReq)
}
ReportReq::ReportReq(const ReportReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.ReportReq)
}

void ReportReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReportReq::~ReportReq() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.ReportReq)
  SharedDtor();
}

void ReportReq::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportReq& ReportReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReportReq::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.ReportReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_content(), ptr, ctx, "automotive_ai.heart.ReportReq.content");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.ReportReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.ReportReq.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.ReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.ReportReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.ReportReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.heart.ReportReq.content");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.ReportReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.ReportReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.heart.ReportReq.content");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.ReportReq)
  return target;
}

size_t ReportReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.ReportReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.ReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.ReportReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.ReportReq)
    MergeFrom(*source);
  }
}

void ReportReq::MergeFrom(const ReportReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.ReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ReportReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.ReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportReq::CopyFrom(const ReportReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.ReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportReq::IsInitialized() const {
  return true;
}

void ReportReq::InternalSwap(ReportReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportRes::InitAsDefaultInstance() {
}
class ReportRes::_Internal {
 public:
};

ReportRes::ReportRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.ReportRes)
}
ReportRes::ReportRes(const ReportRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.ReportRes)
}

void ReportRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReportRes::~ReportRes() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.ReportRes)
  SharedDtor();
}

void ReportRes::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportRes& ReportRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReportRes::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.ReportRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_content(), ptr, ctx, "automotive_ai.heart.ReportRes.content");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.ReportRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.ReportRes.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.ReportRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.ReportRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.ReportRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.heart.ReportRes.content");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.ReportRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.ReportRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.heart.ReportRes.content");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.ReportRes)
  return target;
}

size_t ReportRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.ReportRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.ReportRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.ReportRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.ReportRes)
    MergeFrom(*source);
  }
}

void ReportRes::MergeFrom(const ReportRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.ReportRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ReportRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.ReportRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRes::CopyFrom(const ReportRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.ReportRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRes::IsInitialized() const {
  return true;
}

void ReportRes::InternalSwap(ReportRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitReq::InitAsDefaultInstance() {
}
class InitReq::_Internal {
 public:
};

InitReq::InitReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.InitReq)
}
InitReq::InitReq(const InitReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.config().empty()) {
    config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.InitReq)
}

void InitReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InitReq::~InitReq() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.InitReq)
  SharedDtor();
}

void InitReq::SharedDtor() {
  config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitReq& InitReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.InitReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_config(), ptr, ctx, "automotive_ai.heart.InitReq.config");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.InitReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->config().data(), static_cast<int>(this->config().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.InitReq.config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.InitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.InitReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.InitReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config = 1;
  if (this->config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), static_cast<int>(this->config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.heart.InitReq.config");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.InitReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.InitReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config = 1;
  if (this->config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), static_cast<int>(this->config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.heart.InitReq.config");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.InitReq)
  return target;
}

size_t InitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.InitReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config = 1;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->config());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.InitReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InitReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.InitReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.InitReq)
    MergeFrom(*source);
  }
}

void InitReq::MergeFrom(const InitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.InitReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config().size() > 0) {

    config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
}

void InitReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.InitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitReq::CopyFrom(const InitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.InitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitReq::IsInitialized() const {
  return true;
}

void InitReq::InternalSwap(InitReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_.Swap(&other->config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InitReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InitRes_StubsEntry_DoNotUse::InitRes_StubsEntry_DoNotUse() {}
InitRes_StubsEntry_DoNotUse::InitRes_StubsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InitRes_StubsEntry_DoNotUse::MergeFrom(const InitRes_StubsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InitRes_StubsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InitRes_StubsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

InitRes_ServicesEntry_DoNotUse::InitRes_ServicesEntry_DoNotUse() {}
InitRes_ServicesEntry_DoNotUse::InitRes_ServicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InitRes_ServicesEntry_DoNotUse::MergeFrom(const InitRes_ServicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InitRes_ServicesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InitRes_ServicesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InitRes::InitAsDefaultInstance() {
}
class InitRes::_Internal {
 public:
};

InitRes::InitRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.InitRes)
}
InitRes::InitRes(const InitRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stubs_.MergeFrom(from.stubs_);
  services_.MergeFrom(from.services_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.InitRes)
}

void InitRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
}

InitRes::~InitRes() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.InitRes)
  SharedDtor();
}

void InitRes::SharedDtor() {
}

void InitRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitRes& InitRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InitRes::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.InitRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stubs_.Clear();
  services_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> stubs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stubs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<string, string> services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&services_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.InitRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> stubs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          InitRes_StubsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              InitRes_StubsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&stubs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.InitRes.StubsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.InitRes.StubsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> services = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          InitRes_ServicesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              InitRes_ServicesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&services_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.InitRes.ServicesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.InitRes.ServicesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.InitRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.InitRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.InitRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> stubs = 1;
  if (!this->stubs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.StubsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.StubsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->stubs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stubs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->stubs().begin();
          it != this->stubs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        InitRes_StubsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->stubs().begin();
          it != this->stubs().end(); ++it) {
        InitRes_StubsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> services = 2;
  if (!this->services().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.ServicesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.ServicesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->services().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        InitRes_ServicesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it) {
        InitRes_ServicesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.InitRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.InitRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> stubs = 1;
  if (!this->stubs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.StubsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.StubsEntry.value");
      }
    };

    if (false &&
        this->stubs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stubs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->stubs().begin();
          it != this->stubs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InitRes_StubsEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->stubs().begin();
          it != this->stubs().end(); ++it) {
        target = InitRes_StubsEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> services = 2;
  if (!this->services().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.ServicesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.InitRes.ServicesEntry.value");
      }
    };

    if (false &&
        this->services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->services().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InitRes_ServicesEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->services().begin();
          it != this->services().end(); ++it) {
        target = InitRes_ServicesEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.InitRes)
  return target;
}

size_t InitRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.InitRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> stubs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->stubs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->stubs().begin();
      it != this->stubs().end(); ++it) {
    total_size += InitRes_StubsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> services = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->services_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->services().begin();
      it != this->services().end(); ++it) {
    total_size += InitRes_ServicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.InitRes)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.InitRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.InitRes)
    MergeFrom(*source);
  }
}

void InitRes::MergeFrom(const InitRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.InitRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stubs_.MergeFrom(from.stubs_);
  services_.MergeFrom(from.services_);
}

void InitRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.InitRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRes::CopyFrom(const InitRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.InitRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRes::IsInitialized() const {
  return true;
}

void InitRes::InternalSwap(InitRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stubs_.Swap(&other->stubs_);
  services_.Swap(&other->services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ServeReq_MappingEntry_DoNotUse::ServeReq_MappingEntry_DoNotUse() {}
ServeReq_MappingEntry_DoNotUse::ServeReq_MappingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServeReq_MappingEntry_DoNotUse::MergeFrom(const ServeReq_MappingEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServeReq_MappingEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ServeReq_MappingEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ServeReq::InitAsDefaultInstance() {
}
class ServeReq::_Internal {
 public:
};

ServeReq::ServeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.ServeReq)
}
ServeReq::ServeReq(const ServeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapping_.MergeFrom(from.mapping_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.ServeReq)
}

void ServeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServeReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
}

ServeReq::~ServeReq() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.ServeReq)
  SharedDtor();
}

void ServeReq::SharedDtor() {
}

void ServeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServeReq& ServeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServeReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ServeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.ServeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapping_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapping_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.ServeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> mapping = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ServeReq_MappingEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              ServeReq_MappingEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&mapping_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.ServeReq.MappingEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.ServeReq.MappingEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.ServeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.ServeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.ServeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> mapping = 1;
  if (!this->mapping().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ServeReq.MappingEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ServeReq.MappingEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->mapping().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->mapping().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ServeReq_MappingEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it) {
        ServeReq_MappingEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.ServeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.ServeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> mapping = 1;
  if (!this->mapping().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ServeReq.MappingEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ServeReq.MappingEntry.value");
      }
    };

    if (false &&
        this->mapping().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->mapping().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServeReq_MappingEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it) {
        target = ServeReq_MappingEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.ServeReq)
  return target;
}

size_t ServeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.ServeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> mapping = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->mapping_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->mapping().begin();
      it != this->mapping().end(); ++it) {
    total_size += ServeReq_MappingEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.ServeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.ServeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.ServeReq)
    MergeFrom(*source);
  }
}

void ServeReq::MergeFrom(const ServeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.ServeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapping_.MergeFrom(from.mapping_);
}

void ServeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.ServeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServeReq::CopyFrom(const ServeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.ServeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServeReq::IsInitialized() const {
  return true;
}

void ServeReq::InternalSwap(ServeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mapping_.Swap(&other->mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServeRes::InitAsDefaultInstance() {
}
class ServeRes::_Internal {
 public:
};

ServeRes::ServeRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.ServeRes)
}
ServeRes::ServeRes(const ServeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.ServeRes)
}

void ServeRes::SharedCtor() {
}

ServeRes::~ServeRes() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.ServeRes)
  SharedDtor();
}

void ServeRes::SharedDtor() {
}

void ServeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServeRes& ServeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServeRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ServeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.ServeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServeRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.ServeRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.ServeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.ServeRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServeRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.ServeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.ServeRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServeRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.ServeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.ServeRes)
  return target;
}

size_t ServeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.ServeRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.ServeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ServeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.ServeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.ServeRes)
    MergeFrom(*source);
  }
}

void ServeRes::MergeFrom(const ServeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.ServeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.ServeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServeRes::CopyFrom(const ServeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.ServeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServeRes::IsInitialized() const {
  return true;
}

void ServeRes::InternalSwap(ServeRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ConnectReq_MappingEntry_DoNotUse::ConnectReq_MappingEntry_DoNotUse() {}
ConnectReq_MappingEntry_DoNotUse::ConnectReq_MappingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ConnectReq_MappingEntry_DoNotUse::MergeFrom(const ConnectReq_MappingEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ConnectReq_MappingEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ConnectReq_MappingEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ConnectReq::InitAsDefaultInstance() {
}
class ConnectReq::_Internal {
 public:
};

ConnectReq::ConnectReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.ConnectReq)
}
ConnectReq::ConnectReq(const ConnectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapping_.MergeFrom(from.mapping_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.ConnectReq)
}

void ConnectReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
}

ConnectReq::~ConnectReq() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.ConnectReq)
  SharedDtor();
}

void ConnectReq::SharedDtor() {
}

void ConnectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectReq& ConnectReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConnectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.ConnectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapping_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mapping_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.ConnectReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> mapping = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ConnectReq_MappingEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              ConnectReq_MappingEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&mapping_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.ConnectReq.MappingEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.heart.ConnectReq.MappingEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.ConnectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.ConnectReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.ConnectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> mapping = 1;
  if (!this->mapping().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ConnectReq.MappingEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ConnectReq.MappingEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->mapping().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->mapping().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ConnectReq_MappingEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it) {
        ConnectReq_MappingEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.ConnectReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.ConnectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> mapping = 1;
  if (!this->mapping().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ConnectReq.MappingEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "automotive_ai.heart.ConnectReq.MappingEntry.value");
      }
    };

    if (false &&
        this->mapping().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->mapping().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ConnectReq_MappingEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->mapping().begin();
          it != this->mapping().end(); ++it) {
        target = ConnectReq_MappingEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.ConnectReq)
  return target;
}

size_t ConnectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.ConnectReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> mapping = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->mapping_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->mapping().begin();
      it != this->mapping().end(); ++it) {
    total_size += ConnectReq_MappingEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.ConnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.ConnectReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.ConnectReq)
    MergeFrom(*source);
  }
}

void ConnectReq::MergeFrom(const ConnectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.ConnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapping_.MergeFrom(from.mapping_);
}

void ConnectReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.ConnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectReq::CopyFrom(const ConnectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.ConnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectReq::IsInitialized() const {
  return true;
}

void ConnectReq::InternalSwap(ConnectReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mapping_.Swap(&other->mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectRes::InitAsDefaultInstance() {
}
class ConnectRes::_Internal {
 public:
};

ConnectRes::ConnectRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.ConnectRes)
}
ConnectRes::ConnectRes(const ConnectRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.ConnectRes)
}

void ConnectRes::SharedCtor() {
}

ConnectRes::~ConnectRes() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.ConnectRes)
  SharedDtor();
}

void ConnectRes::SharedDtor() {
}

void ConnectRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectRes& ConnectRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ConnectRes::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.ConnectRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.ConnectRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.ConnectRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.ConnectRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.ConnectRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.ConnectRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.ConnectRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.ConnectRes)
  return target;
}

size_t ConnectRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.ConnectRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.ConnectRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.ConnectRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.ConnectRes)
    MergeFrom(*source);
  }
}

void ConnectRes::MergeFrom(const ConnectRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.ConnectRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConnectRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.ConnectRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRes::CopyFrom(const ConnectRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.ConnectRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRes::IsInitialized() const {
  return true;
}

void ConnectRes::InternalSwap(ConnectRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartReq::InitAsDefaultInstance() {
}
class StartReq::_Internal {
 public:
};

StartReq::StartReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.StartReq)
}
StartReq::StartReq(const StartReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.StartReq)
}

void StartReq::SharedCtor() {
}

StartReq::~StartReq() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.StartReq)
  SharedDtor();
}

void StartReq::SharedDtor() {
}

void StartReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartReq& StartReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void StartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.StartReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.StartReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.StartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.StartReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.StartReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.StartReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* StartReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.StartReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.StartReq)
  return target;
}

size_t StartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.StartReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.StartReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StartReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.StartReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.StartReq)
    MergeFrom(*source);
  }
}

void StartReq::MergeFrom(const StartReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.StartReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.StartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartReq::CopyFrom(const StartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.StartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartReq::IsInitialized() const {
  return true;
}

void StartReq::InternalSwap(StartReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartRes::InitAsDefaultInstance() {
}
class StartRes::_Internal {
 public:
};

StartRes::StartRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.StartRes)
}
StartRes::StartRes(const StartRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.StartRes)
}

void StartRes::SharedCtor() {
}

StartRes::~StartRes() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.StartRes)
  SharedDtor();
}

void StartRes::SharedDtor() {
}

void StartRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRes& StartRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void StartRes::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.StartRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.StartRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.StartRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.StartRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.StartRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.StartRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.StartRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.StartRes)
  return target;
}

size_t StartRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.StartRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.StartRes)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.StartRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.StartRes)
    MergeFrom(*source);
  }
}

void StartRes::MergeFrom(const StartRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.StartRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.StartRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRes::CopyFrom(const StartRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.StartRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRes::IsInitialized() const {
  return true;
}

void StartRes::InternalSwap(StartRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StepReq::InitAsDefaultInstance() {
}
class StepReq::_Internal {
 public:
};

StepReq::StepReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.StepReq)
}
StepReq::StepReq(const StepReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stamp_ = from.stamp_;
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.StepReq)
}

void StepReq::SharedCtor() {
  stamp_ = PROTOBUF_ULONGLONG(0);
}

StepReq::~StepReq() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.StepReq)
  SharedDtor();
}

void StepReq::SharedDtor() {
}

void StepReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StepReq& StepReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StepReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void StepReq::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.StepReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StepReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StepReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.StepReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 stamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.StepReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.StepReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StepReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.StepReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.StepReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* StepReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.StepReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.StepReq)
  return target;
}

size_t StepReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.StepReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.StepReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StepReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.StepReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.StepReq)
    MergeFrom(*source);
  }
}

void StepReq::MergeFrom(const StepReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.StepReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stamp() != 0) {
    set_stamp(from.stamp());
  }
}

void StepReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.StepReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepReq::CopyFrom(const StepReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.StepReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepReq::IsInitialized() const {
  return true;
}

void StepReq::InternalSwap(StepReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stamp_, other->stamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StepRes::InitAsDefaultInstance() {
}
class StepRes::_Internal {
 public:
};

StepRes::StepRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.StepRes)
}
StepRes::StepRes(const StepRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enough_please_stop_ = from.enough_please_stop_;
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.StepRes)
}

void StepRes::SharedCtor() {
  enough_please_stop_ = false;
}

StepRes::~StepRes() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.StepRes)
  SharedDtor();
}

void StepRes::SharedDtor() {
}

void StepRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StepRes& StepRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StepRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void StepRes::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.StepRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enough_please_stop_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StepRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enough_please_stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enough_please_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StepRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.StepRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enough_please_stop = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enough_please_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.StepRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.StepRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StepRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.StepRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enough_please_stop = 1;
  if (this->enough_please_stop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enough_please_stop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.StepRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* StepRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.StepRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enough_please_stop = 1;
  if (this->enough_please_stop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enough_please_stop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.StepRes)
  return target;
}

size_t StepRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.StepRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enough_please_stop = 1;
  if (this->enough_please_stop() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.StepRes)
  GOOGLE_DCHECK_NE(&from, this);
  const StepRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.StepRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.StepRes)
    MergeFrom(*source);
  }
}

void StepRes::MergeFrom(const StepRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.StepRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enough_please_stop() != 0) {
    set_enough_please_stop(from.enough_please_stop());
  }
}

void StepRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.StepRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepRes::CopyFrom(const StepRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.StepRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepRes::IsInitialized() const {
  return true;
}

void StepRes::InternalSwap(StepRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enough_please_stop_, other->enough_please_stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopReq::InitAsDefaultInstance() {
}
class StopReq::_Internal {
 public:
};

StopReq::StopReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.StopReq)
}
StopReq::StopReq(const StopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.StopReq)
}

void StopReq::SharedCtor() {
}

StopReq::~StopReq() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.StopReq)
  SharedDtor();
}

void StopReq::SharedDtor() {
}

void StopReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopReq& StopReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopReq_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void StopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.StopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.StopReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.StopReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.StopReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.StopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.StopReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.StopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.StopReq)
  return target;
}

size_t StopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.StopReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.StopReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StopReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.StopReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.StopReq)
    MergeFrom(*source);
  }
}

void StopReq::MergeFrom(const StopReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.StopReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.StopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopReq::CopyFrom(const StopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.StopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopReq::IsInitialized() const {
  return true;
}

void StopReq::InternalSwap(StopReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRes::InitAsDefaultInstance() {
}
class StopRes::_Internal {
 public:
};

StopRes::StopRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.heart.StopRes)
}
StopRes::StopRes(const StopRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.heart.StopRes)
}

void StopRes::SharedCtor() {
}

StopRes::~StopRes() {
  // @@protoc_insertion_point(destructor:automotive_ai.heart.StopRes)
  SharedDtor();
}

void StopRes::SharedDtor() {
}

void StopRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRes& StopRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRes_automotive_5fai_2fheart_2fheart_5fservice_2eproto.base);
  return *internal_default_instance();
}


void StopRes::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.heart.StopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.heart.StopRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.heart.StopRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.heart.StopRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.heart.StopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.heart.StopRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.heart.StopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.heart.StopRes)
  return target;
}

size_t StopRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.heart.StopRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.heart.StopRes)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.heart.StopRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.heart.StopRes)
    MergeFrom(*source);
  }
}

void StopRes::MergeFrom(const StopRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.heart.StopRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.heart.StopRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRes::CopyFrom(const StopRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.heart.StopRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRes::IsInitialized() const {
  return true;
}

void StopRes::InternalSwap(StopRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace heart
}  // namespace automotive_ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ReportReq* Arena::CreateMaybeMessage< ::automotive_ai::heart::ReportReq >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ReportReq >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ReportRes* Arena::CreateMaybeMessage< ::automotive_ai::heart::ReportRes >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ReportRes >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::InitReq* Arena::CreateMaybeMessage< ::automotive_ai::heart::InitReq >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::InitReq >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::InitRes_StubsEntry_DoNotUse* Arena::CreateMaybeMessage< ::automotive_ai::heart::InitRes_StubsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::InitRes_StubsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::InitRes_ServicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::InitRes* Arena::CreateMaybeMessage< ::automotive_ai::heart::InitRes >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::InitRes >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse* Arena::CreateMaybeMessage< ::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ServeReq_MappingEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ServeReq* Arena::CreateMaybeMessage< ::automotive_ai::heart::ServeReq >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ServeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ServeRes* Arena::CreateMaybeMessage< ::automotive_ai::heart::ServeRes >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ServeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse* Arena::CreateMaybeMessage< ::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ConnectReq_MappingEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ConnectReq* Arena::CreateMaybeMessage< ::automotive_ai::heart::ConnectReq >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ConnectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::ConnectRes* Arena::CreateMaybeMessage< ::automotive_ai::heart::ConnectRes >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::ConnectRes >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::StartReq* Arena::CreateMaybeMessage< ::automotive_ai::heart::StartReq >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::StartReq >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::StartRes* Arena::CreateMaybeMessage< ::automotive_ai::heart::StartRes >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::StartRes >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::StepReq* Arena::CreateMaybeMessage< ::automotive_ai::heart::StepReq >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::StepReq >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::StepRes* Arena::CreateMaybeMessage< ::automotive_ai::heart::StepRes >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::StepRes >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::StopReq* Arena::CreateMaybeMessage< ::automotive_ai::heart::StopReq >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::StopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::heart::StopRes* Arena::CreateMaybeMessage< ::automotive_ai::heart::StopRes >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::heart::StopRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
