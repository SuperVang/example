// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: automotive_ai/common/new_traffic_vehicle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto;
namespace automotive_ai {
namespace common {
class NewTrafficVehicle;
class NewTrafficVehicleDefaultTypeInternal;
extern NewTrafficVehicleDefaultTypeInternal _NewTrafficVehicle_default_instance_;
class NewTrafficVehicles;
class NewTrafficVehiclesDefaultTypeInternal;
extern NewTrafficVehiclesDefaultTypeInternal _NewTrafficVehicles_default_instance_;
}  // namespace common
}  // namespace automotive_ai
PROTOBUF_NAMESPACE_OPEN
template<> ::automotive_ai::common::NewTrafficVehicle* Arena::CreateMaybeMessage<::automotive_ai::common::NewTrafficVehicle>(Arena*);
template<> ::automotive_ai::common::NewTrafficVehicles* Arena::CreateMaybeMessage<::automotive_ai::common::NewTrafficVehicles>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace automotive_ai {
namespace common {

enum NewTrafficVehicle_Indicator : int {
  NewTrafficVehicle_Indicator_None = 0,
  NewTrafficVehicle_Indicator_Left = 1,
  NewTrafficVehicle_Indicator_Right = 2,
  NewTrafficVehicle_Indicator_NewTrafficVehicle_Indicator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NewTrafficVehicle_Indicator_NewTrafficVehicle_Indicator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NewTrafficVehicle_Indicator_IsValid(int value);
constexpr NewTrafficVehicle_Indicator NewTrafficVehicle_Indicator_Indicator_MIN = NewTrafficVehicle_Indicator_None;
constexpr NewTrafficVehicle_Indicator NewTrafficVehicle_Indicator_Indicator_MAX = NewTrafficVehicle_Indicator_Right;
constexpr int NewTrafficVehicle_Indicator_Indicator_ARRAYSIZE = NewTrafficVehicle_Indicator_Indicator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewTrafficVehicle_Indicator_descriptor();
template<typename T>
inline const std::string& NewTrafficVehicle_Indicator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NewTrafficVehicle_Indicator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NewTrafficVehicle_Indicator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NewTrafficVehicle_Indicator_descriptor(), enum_t_value);
}
inline bool NewTrafficVehicle_Indicator_Parse(
    const std::string& name, NewTrafficVehicle_Indicator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NewTrafficVehicle_Indicator>(
    NewTrafficVehicle_Indicator_descriptor(), name, value);
}
// ===================================================================

class NewTrafficVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.common.NewTrafficVehicle) */ {
 public:
  NewTrafficVehicle();
  virtual ~NewTrafficVehicle();

  NewTrafficVehicle(const NewTrafficVehicle& from);
  NewTrafficVehicle(NewTrafficVehicle&& from) noexcept
    : NewTrafficVehicle() {
    *this = ::std::move(from);
  }

  inline NewTrafficVehicle& operator=(const NewTrafficVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewTrafficVehicle& operator=(NewTrafficVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewTrafficVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewTrafficVehicle* internal_default_instance() {
    return reinterpret_cast<const NewTrafficVehicle*>(
               &_NewTrafficVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewTrafficVehicle& a, NewTrafficVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(NewTrafficVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewTrafficVehicle* New() const final {
    return CreateMaybeMessage<NewTrafficVehicle>(nullptr);
  }

  NewTrafficVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewTrafficVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewTrafficVehicle& from);
  void MergeFrom(const NewTrafficVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTrafficVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.common.NewTrafficVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto);
    return ::descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NewTrafficVehicle_Indicator Indicator;
  static constexpr Indicator None =
    NewTrafficVehicle_Indicator_None;
  static constexpr Indicator Left =
    NewTrafficVehicle_Indicator_Left;
  static constexpr Indicator Right =
    NewTrafficVehicle_Indicator_Right;
  static inline bool Indicator_IsValid(int value) {
    return NewTrafficVehicle_Indicator_IsValid(value);
  }
  static constexpr Indicator Indicator_MIN =
    NewTrafficVehicle_Indicator_Indicator_MIN;
  static constexpr Indicator Indicator_MAX =
    NewTrafficVehicle_Indicator_Indicator_MAX;
  static constexpr int Indicator_ARRAYSIZE =
    NewTrafficVehicle_Indicator_Indicator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Indicator_descriptor() {
    return NewTrafficVehicle_Indicator_descriptor();
  }
  template<typename T>
  static inline const std::string& Indicator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Indicator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Indicator_Name.");
    return NewTrafficVehicle_Indicator_Name(enum_t_value);
  }
  static inline bool Indicator_Parse(const std::string& name,
      Indicator* value) {
    return NewTrafficVehicle_Indicator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleProfileFieldNumber = 15,
    kIdFieldNumber = 1,
    kModelFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
    kPosZFieldNumber = 5,
    kYawFieldNumber = 7,
    kPitchFieldNumber = 8,
    kRollFieldNumber = 9,
    kSpeedFieldNumber = 10,
    kIndicatorFieldNumber = 11,
    kLightMaskFieldNumber = 12,
    kLaneIdFieldNumber = 13,
    kRoadIdFieldNumber = 14,
  };
  // string vehicle_profile = 15;
  void clear_vehicle_profile();
  const std::string& vehicle_profile() const;
  void set_vehicle_profile(const std::string& value);
  void set_vehicle_profile(std::string&& value);
  void set_vehicle_profile(const char* value);
  void set_vehicle_profile(const char* value, size_t size);
  std::string* mutable_vehicle_profile();
  std::string* release_vehicle_profile();
  void set_allocated_vehicle_profile(std::string* vehicle_profile);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 model = 2;
  void clear_model();
  ::PROTOBUF_NAMESPACE_ID::int32 model() const;
  void set_model(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double pos_x = 3;
  void clear_pos_x();
  double pos_x() const;
  void set_pos_x(double value);

  // double pos_y = 4;
  void clear_pos_y();
  double pos_y() const;
  void set_pos_y(double value);

  // double pos_z = 5;
  void clear_pos_z();
  double pos_z() const;
  void set_pos_z(double value);

  // double yaw = 7;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);

  // double pitch = 8;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);

  // double roll = 9;
  void clear_roll();
  double roll() const;
  void set_roll(double value);

  // double speed = 10;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // .automotive_ai.common.NewTrafficVehicle.Indicator indicator = 11;
  void clear_indicator();
  ::automotive_ai::common::NewTrafficVehicle_Indicator indicator() const;
  void set_indicator(::automotive_ai::common::NewTrafficVehicle_Indicator value);

  // uint32 light_mask = 12;
  void clear_light_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 light_mask() const;
  void set_light_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint64 lane_id = 13;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 road_id = 14;
  void clear_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 road_id() const;
  void set_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:automotive_ai.common.NewTrafficVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_profile_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_;
  double pos_x_;
  double pos_y_;
  double pos_z_;
  double yaw_;
  double pitch_;
  double roll_;
  double speed_;
  int indicator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 light_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lane_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 road_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto;
};
// -------------------------------------------------------------------

class NewTrafficVehicles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:automotive_ai.common.NewTrafficVehicles) */ {
 public:
  NewTrafficVehicles();
  virtual ~NewTrafficVehicles();

  NewTrafficVehicles(const NewTrafficVehicles& from);
  NewTrafficVehicles(NewTrafficVehicles&& from) noexcept
    : NewTrafficVehicles() {
    *this = ::std::move(from);
  }

  inline NewTrafficVehicles& operator=(const NewTrafficVehicles& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewTrafficVehicles& operator=(NewTrafficVehicles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewTrafficVehicles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewTrafficVehicles* internal_default_instance() {
    return reinterpret_cast<const NewTrafficVehicles*>(
               &_NewTrafficVehicles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewTrafficVehicles& a, NewTrafficVehicles& b) {
    a.Swap(&b);
  }
  inline void Swap(NewTrafficVehicles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewTrafficVehicles* New() const final {
    return CreateMaybeMessage<NewTrafficVehicles>(nullptr);
  }

  NewTrafficVehicles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewTrafficVehicles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewTrafficVehicles& from);
  void MergeFrom(const NewTrafficVehicles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTrafficVehicles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "automotive_ai.common.NewTrafficVehicles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto);
    return ::descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesFieldNumber = 1,
  };
  // repeated .automotive_ai.common.NewTrafficVehicle vehicles = 1;
  int vehicles_size() const;
  void clear_vehicles();
  ::automotive_ai::common::NewTrafficVehicle* mutable_vehicles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::automotive_ai::common::NewTrafficVehicle >*
      mutable_vehicles();
  const ::automotive_ai::common::NewTrafficVehicle& vehicles(int index) const;
  ::automotive_ai::common::NewTrafficVehicle* add_vehicles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::automotive_ai::common::NewTrafficVehicle >&
      vehicles() const;

  // @@protoc_insertion_point(class_scope:automotive_ai.common.NewTrafficVehicles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::automotive_ai::common::NewTrafficVehicle > vehicles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewTrafficVehicle

// int32 id = 1;
inline void NewTrafficVehicle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewTrafficVehicle::id() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.id)
  return id_;
}
inline void NewTrafficVehicle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.id)
}

// int32 model = 2;
inline void NewTrafficVehicle::clear_model() {
  model_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewTrafficVehicle::model() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.model)
  return model_;
}
inline void NewTrafficVehicle::set_model(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.model)
}

// double pos_x = 3;
inline void NewTrafficVehicle::clear_pos_x() {
  pos_x_ = 0;
}
inline double NewTrafficVehicle::pos_x() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.pos_x)
  return pos_x_;
}
inline void NewTrafficVehicle::set_pos_x(double value) {
  
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.pos_x)
}

// double pos_y = 4;
inline void NewTrafficVehicle::clear_pos_y() {
  pos_y_ = 0;
}
inline double NewTrafficVehicle::pos_y() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.pos_y)
  return pos_y_;
}
inline void NewTrafficVehicle::set_pos_y(double value) {
  
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.pos_y)
}

// double pos_z = 5;
inline void NewTrafficVehicle::clear_pos_z() {
  pos_z_ = 0;
}
inline double NewTrafficVehicle::pos_z() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.pos_z)
  return pos_z_;
}
inline void NewTrafficVehicle::set_pos_z(double value) {
  
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.pos_z)
}

// double yaw = 7;
inline void NewTrafficVehicle::clear_yaw() {
  yaw_ = 0;
}
inline double NewTrafficVehicle::yaw() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.yaw)
  return yaw_;
}
inline void NewTrafficVehicle::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.yaw)
}

// double pitch = 8;
inline void NewTrafficVehicle::clear_pitch() {
  pitch_ = 0;
}
inline double NewTrafficVehicle::pitch() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.pitch)
  return pitch_;
}
inline void NewTrafficVehicle::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.pitch)
}

// double roll = 9;
inline void NewTrafficVehicle::clear_roll() {
  roll_ = 0;
}
inline double NewTrafficVehicle::roll() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.roll)
  return roll_;
}
inline void NewTrafficVehicle::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.roll)
}

// double speed = 10;
inline void NewTrafficVehicle::clear_speed() {
  speed_ = 0;
}
inline double NewTrafficVehicle::speed() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.speed)
  return speed_;
}
inline void NewTrafficVehicle::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.speed)
}

// .automotive_ai.common.NewTrafficVehicle.Indicator indicator = 11;
inline void NewTrafficVehicle::clear_indicator() {
  indicator_ = 0;
}
inline ::automotive_ai::common::NewTrafficVehicle_Indicator NewTrafficVehicle::indicator() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.indicator)
  return static_cast< ::automotive_ai::common::NewTrafficVehicle_Indicator >(indicator_);
}
inline void NewTrafficVehicle::set_indicator(::automotive_ai::common::NewTrafficVehicle_Indicator value) {
  
  indicator_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.indicator)
}

// uint32 light_mask = 12;
inline void NewTrafficVehicle::clear_light_mask() {
  light_mask_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewTrafficVehicle::light_mask() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.light_mask)
  return light_mask_;
}
inline void NewTrafficVehicle::set_light_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  light_mask_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.light_mask)
}

// uint64 lane_id = 13;
inline void NewTrafficVehicle::clear_lane_id() {
  lane_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewTrafficVehicle::lane_id() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.lane_id)
  return lane_id_;
}
inline void NewTrafficVehicle::set_lane_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.lane_id)
}

// uint64 road_id = 14;
inline void NewTrafficVehicle::clear_road_id() {
  road_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewTrafficVehicle::road_id() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.road_id)
  return road_id_;
}
inline void NewTrafficVehicle::set_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  road_id_ = value;
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.road_id)
}

// string vehicle_profile = 15;
inline void NewTrafficVehicle::clear_vehicle_profile() {
  vehicle_profile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NewTrafficVehicle::vehicle_profile() const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
  return vehicle_profile_.GetNoArena();
}
inline void NewTrafficVehicle::set_vehicle_profile(const std::string& value) {
  
  vehicle_profile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
}
inline void NewTrafficVehicle::set_vehicle_profile(std::string&& value) {
  
  vehicle_profile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
}
inline void NewTrafficVehicle::set_vehicle_profile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_profile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
}
inline void NewTrafficVehicle::set_vehicle_profile(const char* value, size_t size) {
  
  vehicle_profile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
}
inline std::string* NewTrafficVehicle::mutable_vehicle_profile() {
  
  // @@protoc_insertion_point(field_mutable:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
  return vehicle_profile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewTrafficVehicle::release_vehicle_profile() {
  // @@protoc_insertion_point(field_release:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
  
  return vehicle_profile_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewTrafficVehicle::set_allocated_vehicle_profile(std::string* vehicle_profile) {
  if (vehicle_profile != nullptr) {
    
  } else {
    
  }
  vehicle_profile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_profile);
  // @@protoc_insertion_point(field_set_allocated:automotive_ai.common.NewTrafficVehicle.vehicle_profile)
}

// -------------------------------------------------------------------

// NewTrafficVehicles

// repeated .automotive_ai.common.NewTrafficVehicle vehicles = 1;
inline int NewTrafficVehicles::vehicles_size() const {
  return vehicles_.size();
}
inline void NewTrafficVehicles::clear_vehicles() {
  vehicles_.Clear();
}
inline ::automotive_ai::common::NewTrafficVehicle* NewTrafficVehicles::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:automotive_ai.common.NewTrafficVehicles.vehicles)
  return vehicles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::automotive_ai::common::NewTrafficVehicle >*
NewTrafficVehicles::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:automotive_ai.common.NewTrafficVehicles.vehicles)
  return &vehicles_;
}
inline const ::automotive_ai::common::NewTrafficVehicle& NewTrafficVehicles::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:automotive_ai.common.NewTrafficVehicles.vehicles)
  return vehicles_.Get(index);
}
inline ::automotive_ai::common::NewTrafficVehicle* NewTrafficVehicles::add_vehicles() {
  // @@protoc_insertion_point(field_add:automotive_ai.common.NewTrafficVehicles.vehicles)
  return vehicles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::automotive_ai::common::NewTrafficVehicle >&
NewTrafficVehicles::vehicles() const {
  // @@protoc_insertion_point(field_list:automotive_ai.common.NewTrafficVehicles.vehicles)
  return vehicles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace automotive_ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::automotive_ai::common::NewTrafficVehicle_Indicator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::automotive_ai::common::NewTrafficVehicle_Indicator>() {
  return ::automotive_ai::common::NewTrafficVehicle_Indicator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto
