// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: automotive_ai/common/new_traffic_vehicle.proto

#include "automotive_ai/common/new_traffic_vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto;
namespace automotive_ai {
namespace common {
class NewTrafficVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewTrafficVehicle> _instance;
} _NewTrafficVehicle_default_instance_;
class NewTrafficVehiclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewTrafficVehicles> _instance;
} _NewTrafficVehicles_default_instance_;
}  // namespace common
}  // namespace automotive_ai
static void InitDefaultsscc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::common::_NewTrafficVehicle_default_instance_;
    new (ptr) ::automotive_ai::common::NewTrafficVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::common::NewTrafficVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto}, {}};

static void InitDefaultsscc_info_NewTrafficVehicles_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::automotive_ai::common::_NewTrafficVehicles_default_instance_;
    new (ptr) ::automotive_ai::common::NewTrafficVehicles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::automotive_ai::common::NewTrafficVehicles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewTrafficVehicles_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NewTrafficVehicles_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto}, {
      &scc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, id_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, model_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, pos_x_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, pos_y_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, pos_z_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, yaw_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, pitch_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, roll_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, speed_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, indicator_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, light_mask_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, lane_id_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, road_id_),
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicle, vehicle_profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::automotive_ai::common::NewTrafficVehicles, vehicles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::automotive_ai::common::NewTrafficVehicle)},
  { 19, -1, sizeof(::automotive_ai::common::NewTrafficVehicles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::common::_NewTrafficVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::automotive_ai::common::_NewTrafficVehicles_default_instance_),
};

const char descriptor_table_protodef_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.automotive_ai/common/new_traffic_vehic"
  "le.proto\022\024automotive_ai.common\"\325\002\n\021NewTr"
  "afficVehicle\022\n\n\002id\030\001 \001(\005\022\r\n\005model\030\002 \001(\005\022"
  "\r\n\005pos_x\030\003 \001(\001\022\r\n\005pos_y\030\004 \001(\001\022\r\n\005pos_z\030\005"
  " \001(\001\022\013\n\003yaw\030\007 \001(\001\022\r\n\005pitch\030\010 \001(\001\022\014\n\004roll"
  "\030\t \001(\001\022\r\n\005speed\030\n \001(\001\022D\n\tindicator\030\013 \001(\016"
  "21.automotive_ai.common.NewTrafficVehicl"
  "e.Indicator\022\022\n\nlight_mask\030\014 \001(\r\022\017\n\007lane_"
  "id\030\r \001(\004\022\017\n\007road_id\030\016 \001(\004\022\027\n\017vehicle_pro"
  "file\030\017 \001(\t\"*\n\tIndicator\022\010\n\004None\020\000\022\010\n\004Lef"
  "t\020\001\022\t\n\005Right\020\002\"O\n\022NewTrafficVehicles\0229\n\010"
  "vehicles\030\001 \003(\0132\'.automotive_ai.common.Ne"
  "wTrafficVehicleB\006\242\002\003AAIb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_sccs[2] = {
  &scc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.base,
  &scc_info_NewTrafficVehicles_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_once;
static bool descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto = {
  &descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_initialized, descriptor_table_protodef_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto, "automotive_ai/common/new_traffic_vehicle.proto", 511,
  &descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_once, descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_sccs, descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto::offsets,
  file_level_metadata_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto, 2, file_level_enum_descriptors_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto, file_level_service_descriptors_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto), true);
namespace automotive_ai {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewTrafficVehicle_Indicator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto);
  return file_level_enum_descriptors_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto[0];
}
bool NewTrafficVehicle_Indicator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NewTrafficVehicle_Indicator NewTrafficVehicle::None;
constexpr NewTrafficVehicle_Indicator NewTrafficVehicle::Left;
constexpr NewTrafficVehicle_Indicator NewTrafficVehicle::Right;
constexpr NewTrafficVehicle_Indicator NewTrafficVehicle::Indicator_MIN;
constexpr NewTrafficVehicle_Indicator NewTrafficVehicle::Indicator_MAX;
constexpr int NewTrafficVehicle::Indicator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NewTrafficVehicle::InitAsDefaultInstance() {
}
class NewTrafficVehicle::_Internal {
 public:
};

NewTrafficVehicle::NewTrafficVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.common.NewTrafficVehicle)
}
NewTrafficVehicle::NewTrafficVehicle(const NewTrafficVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicle_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.vehicle_profile().empty()) {
    vehicle_profile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vehicle_profile_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&road_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(road_id_));
  // @@protoc_insertion_point(copy_constructor:automotive_ai.common.NewTrafficVehicle)
}

void NewTrafficVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.base);
  vehicle_profile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(road_id_));
}

NewTrafficVehicle::~NewTrafficVehicle() {
  // @@protoc_insertion_point(destructor:automotive_ai.common.NewTrafficVehicle)
  SharedDtor();
}

void NewTrafficVehicle::SharedDtor() {
  vehicle_profile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewTrafficVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewTrafficVehicle& NewTrafficVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewTrafficVehicle_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.base);
  return *internal_default_instance();
}


void NewTrafficVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.common.NewTrafficVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_profile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(road_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewTrafficVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pos_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pos_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pos_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yaw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .automotive_ai.common.NewTrafficVehicle.Indicator indicator = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_indicator(static_cast<::automotive_ai::common::NewTrafficVehicle_Indicator>(val));
        } else goto handle_unusual;
        continue;
      // uint32 light_mask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          light_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lane_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 road_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vehicle_profile = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_vehicle_profile(), ptr, ctx, "automotive_ai.common.NewTrafficVehicle.vehicle_profile");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewTrafficVehicle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.common.NewTrafficVehicle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 model = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .automotive_ai.common.NewTrafficVehicle.Indicator indicator = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_indicator(static_cast< ::automotive_ai::common::NewTrafficVehicle_Indicator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 light_mask = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &light_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lane_id = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 road_id = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicle_profile = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_profile()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->vehicle_profile().data(), static_cast<int>(this->vehicle_profile().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "automotive_ai.common.NewTrafficVehicle.vehicle_profile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.common.NewTrafficVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.common.NewTrafficVehicle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewTrafficVehicle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.common.NewTrafficVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 model = 2;
  if (this->model() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->model(), output);
  }

  // double pos_x = 3;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->pos_x(), output);
  }

  // double pos_y = 4;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->pos_y(), output);
  }

  // double pos_z = 5;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->pos_z(), output);
  }

  // double yaw = 7;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->yaw(), output);
  }

  // double pitch = 8;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->pitch(), output);
  }

  // double roll = 9;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->roll(), output);
  }

  // double speed = 10;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->speed(), output);
  }

  // .automotive_ai.common.NewTrafficVehicle.Indicator indicator = 11;
  if (this->indicator() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->indicator(), output);
  }

  // uint32 light_mask = 12;
  if (this->light_mask() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->light_mask(), output);
  }

  // uint64 lane_id = 13;
  if (this->lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->lane_id(), output);
  }

  // uint64 road_id = 14;
  if (this->road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(14, this->road_id(), output);
  }

  // string vehicle_profile = 15;
  if (this->vehicle_profile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->vehicle_profile().data(), static_cast<int>(this->vehicle_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.common.NewTrafficVehicle.vehicle_profile");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->vehicle_profile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.common.NewTrafficVehicle)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewTrafficVehicle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.common.NewTrafficVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 model = 2;
  if (this->model() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->model(), target);
  }

  // double pos_x = 3;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->pos_x(), target);
  }

  // double pos_y = 4;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->pos_y(), target);
  }

  // double pos_z = 5;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->pos_z(), target);
  }

  // double yaw = 7;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->yaw(), target);
  }

  // double pitch = 8;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->pitch(), target);
  }

  // double roll = 9;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->roll(), target);
  }

  // double speed = 10;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->speed(), target);
  }

  // .automotive_ai.common.NewTrafficVehicle.Indicator indicator = 11;
  if (this->indicator() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->indicator(), target);
  }

  // uint32 light_mask = 12;
  if (this->light_mask() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->light_mask(), target);
  }

  // uint64 lane_id = 13;
  if (this->lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->lane_id(), target);
  }

  // uint64 road_id = 14;
  if (this->road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->road_id(), target);
  }

  // string vehicle_profile = 15;
  if (this->vehicle_profile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->vehicle_profile().data(), static_cast<int>(this->vehicle_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "automotive_ai.common.NewTrafficVehicle.vehicle_profile");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->vehicle_profile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.common.NewTrafficVehicle)
  return target;
}

size_t NewTrafficVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.common.NewTrafficVehicle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vehicle_profile = 15;
  if (this->vehicle_profile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->vehicle_profile());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 model = 2;
  if (this->model() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->model());
  }

  // double pos_x = 3;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double pos_y = 4;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double pos_z = 5;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double yaw = 7;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 8;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double roll = 9;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double speed = 10;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  // .automotive_ai.common.NewTrafficVehicle.Indicator indicator = 11;
  if (this->indicator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->indicator());
  }

  // uint32 light_mask = 12;
  if (this->light_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->light_mask());
  }

  // uint64 lane_id = 13;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->lane_id());
  }

  // uint64 road_id = 14;
  if (this->road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->road_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewTrafficVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.common.NewTrafficVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const NewTrafficVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewTrafficVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.common.NewTrafficVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.common.NewTrafficVehicle)
    MergeFrom(*source);
  }
}

void NewTrafficVehicle::MergeFrom(const NewTrafficVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.common.NewTrafficVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_profile().size() > 0) {

    vehicle_profile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vehicle_profile_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.model() != 0) {
    set_model(from.model());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    set_pos_x(from.pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    set_pos_y(from.pos_y());
  }
  if (!(from.pos_z() <= 0 && from.pos_z() >= 0)) {
    set_pos_z(from.pos_z());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    set_yaw(from.yaw());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    set_pitch(from.pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    set_roll(from.roll());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
  if (from.indicator() != 0) {
    set_indicator(from.indicator());
  }
  if (from.light_mask() != 0) {
    set_light_mask(from.light_mask());
  }
  if (from.lane_id() != 0) {
    set_lane_id(from.lane_id());
  }
  if (from.road_id() != 0) {
    set_road_id(from.road_id());
  }
}

void NewTrafficVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.common.NewTrafficVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTrafficVehicle::CopyFrom(const NewTrafficVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.common.NewTrafficVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTrafficVehicle::IsInitialized() const {
  return true;
}

void NewTrafficVehicle::InternalSwap(NewTrafficVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vehicle_profile_.Swap(&other->vehicle_profile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(model_, other->model_);
  swap(pos_x_, other->pos_x_);
  swap(pos_y_, other->pos_y_);
  swap(pos_z_, other->pos_z_);
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(speed_, other->speed_);
  swap(indicator_, other->indicator_);
  swap(light_mask_, other->light_mask_);
  swap(lane_id_, other->lane_id_);
  swap(road_id_, other->road_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewTrafficVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewTrafficVehicles::InitAsDefaultInstance() {
}
class NewTrafficVehicles::_Internal {
 public:
};

NewTrafficVehicles::NewTrafficVehicles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:automotive_ai.common.NewTrafficVehicles)
}
NewTrafficVehicles::NewTrafficVehicles(const NewTrafficVehicles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vehicles_(from.vehicles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:automotive_ai.common.NewTrafficVehicles)
}

void NewTrafficVehicles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewTrafficVehicles_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.base);
}

NewTrafficVehicles::~NewTrafficVehicles() {
  // @@protoc_insertion_point(destructor:automotive_ai.common.NewTrafficVehicles)
  SharedDtor();
}

void NewTrafficVehicles::SharedDtor() {
}

void NewTrafficVehicles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewTrafficVehicles& NewTrafficVehicles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewTrafficVehicles_automotive_5fai_2fcommon_2fnew_5ftraffic_5fvehicle_2eproto.base);
  return *internal_default_instance();
}


void NewTrafficVehicles::Clear() {
// @@protoc_insertion_point(message_clear_start:automotive_ai.common.NewTrafficVehicles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicles_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewTrafficVehicles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .automotive_ai.common.NewTrafficVehicle vehicles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vehicles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewTrafficVehicles::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:automotive_ai.common.NewTrafficVehicles)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .automotive_ai.common.NewTrafficVehicle vehicles = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vehicles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:automotive_ai.common.NewTrafficVehicles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:automotive_ai.common.NewTrafficVehicles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewTrafficVehicles::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:automotive_ai.common.NewTrafficVehicles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .automotive_ai.common.NewTrafficVehicle vehicles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vehicles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:automotive_ai.common.NewTrafficVehicles)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewTrafficVehicles::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:automotive_ai.common.NewTrafficVehicles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .automotive_ai.common.NewTrafficVehicle vehicles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vehicles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:automotive_ai.common.NewTrafficVehicles)
  return target;
}

size_t NewTrafficVehicles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:automotive_ai.common.NewTrafficVehicles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .automotive_ai.common.NewTrafficVehicle vehicles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vehicles(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewTrafficVehicles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:automotive_ai.common.NewTrafficVehicles)
  GOOGLE_DCHECK_NE(&from, this);
  const NewTrafficVehicles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewTrafficVehicles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:automotive_ai.common.NewTrafficVehicles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:automotive_ai.common.NewTrafficVehicles)
    MergeFrom(*source);
  }
}

void NewTrafficVehicles::MergeFrom(const NewTrafficVehicles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:automotive_ai.common.NewTrafficVehicles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicles_.MergeFrom(from.vehicles_);
}

void NewTrafficVehicles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:automotive_ai.common.NewTrafficVehicles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTrafficVehicles::CopyFrom(const NewTrafficVehicles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:automotive_ai.common.NewTrafficVehicles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTrafficVehicles::IsInitialized() const {
  return true;
}

void NewTrafficVehicles::InternalSwap(NewTrafficVehicles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vehicles_)->InternalSwap(CastToBase(&other->vehicles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewTrafficVehicles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace automotive_ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::automotive_ai::common::NewTrafficVehicle* Arena::CreateMaybeMessage< ::automotive_ai::common::NewTrafficVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::common::NewTrafficVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::automotive_ai::common::NewTrafficVehicles* Arena::CreateMaybeMessage< ::automotive_ai::common::NewTrafficVehicles >(Arena* arena) {
  return Arena::CreateInternal< ::automotive_ai::common::NewTrafficVehicles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
