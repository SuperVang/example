// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: automotive_ai/world/new_traffic_service.proto

#include "automotive_ai/world/new_traffic_service.pb.h"
#include "automotive_ai/world/new_traffic_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace automotive_ai {
namespace world {

class MockNewTrafficServiceStub : public NewTrafficService::StubInterface {
 public:
  MOCK_METHOD3(ReportTraffic, ::grpc::Status(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncReportTrafficRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncReportTrafficRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetTraffic, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::automotive_ai::common::NewTrafficVehicles* response));
  MOCK_METHOD3(AsyncGetTrafficRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetTrafficRaw, ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(StepNextEnd, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response));
  MOCK_METHOD3(AsyncStepNextEndRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStepNextEndRaw, ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

} // namespace automotive_ai
} // namespace world

