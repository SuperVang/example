// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: automotive_ai/world/new_traffic_service.proto

#include "automotive_ai/world/new_traffic_service.pb.h"
#include "automotive_ai/world/new_traffic_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace automotive_ai {
namespace world {

static const char* NewTrafficService_method_names[] = {
  "/automotive_ai.world.NewTrafficService/ReportTraffic",
  "/automotive_ai.world.NewTrafficService/GetTraffic",
  "/automotive_ai.world.NewTrafficService/StepNextEnd",
};

std::unique_ptr< NewTrafficService::Stub> NewTrafficService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NewTrafficService::Stub> stub(new NewTrafficService::Stub(channel));
  return stub;
}

NewTrafficService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ReportTraffic_(NewTrafficService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTraffic_(NewTrafficService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StepNextEnd_(NewTrafficService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NewTrafficService::Stub::ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportTraffic_, context, request, response);
}

void NewTrafficService::Stub::experimental_async::ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportTraffic_, context, request, response, std::move(f));
}

void NewTrafficService::Stub::experimental_async::ReportTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportTraffic_, context, request, response, std::move(f));
}

void NewTrafficService::Stub::experimental_async::ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportTraffic_, context, request, response, reactor);
}

void NewTrafficService::Stub::experimental_async::ReportTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportTraffic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NewTrafficService::Stub::AsyncReportTrafficRaw(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ReportTraffic_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NewTrafficService::Stub::PrepareAsyncReportTrafficRaw(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ReportTraffic_, context, request, false);
}

::grpc::Status NewTrafficService::Stub::GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::automotive_ai::common::NewTrafficVehicles* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTraffic_, context, request, response);
}

void NewTrafficService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, std::move(f));
}

void NewTrafficService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::common::NewTrafficVehicles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, std::move(f));
}

void NewTrafficService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, reactor);
}

void NewTrafficService::Stub::experimental_async::GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::common::NewTrafficVehicles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTraffic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>* NewTrafficService::Stub::AsyncGetTrafficRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::automotive_ai::common::NewTrafficVehicles>::Create(channel_.get(), cq, rpcmethod_GetTraffic_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>* NewTrafficService::Stub::PrepareAsyncGetTrafficRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::automotive_ai::common::NewTrafficVehicles>::Create(channel_.get(), cq, rpcmethod_GetTraffic_, context, request, false);
}

::grpc::Status NewTrafficService::Stub::StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StepNextEnd_, context, request, response);
}

void NewTrafficService::Stub::experimental_async::StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StepNextEnd_, context, request, response, std::move(f));
}

void NewTrafficService::Stub::experimental_async::StepNextEnd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StepNextEnd_, context, request, response, std::move(f));
}

void NewTrafficService::Stub::experimental_async::StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StepNextEnd_, context, request, response, reactor);
}

void NewTrafficService::Stub::experimental_async::StepNextEnd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StepNextEnd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NewTrafficService::Stub::AsyncStepNextEndRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StepNextEnd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NewTrafficService::Stub::PrepareAsyncStepNextEndRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StepNextEnd_, context, request, false);
}

NewTrafficService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NewTrafficService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NewTrafficService::Service, ::automotive_ai::common::NewTrafficVehicles, ::google::protobuf::Empty>(
          std::mem_fn(&NewTrafficService::Service::ReportTraffic), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NewTrafficService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NewTrafficService::Service, ::google::protobuf::Empty, ::automotive_ai::common::NewTrafficVehicles>(
          std::mem_fn(&NewTrafficService::Service::GetTraffic), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NewTrafficService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NewTrafficService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&NewTrafficService::Service::StepNextEnd), this)));
}

NewTrafficService::Service::~Service() {
}

::grpc::Status NewTrafficService::Service::ReportTraffic(::grpc::ServerContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NewTrafficService::Service::GetTraffic(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NewTrafficService::Service::StepNextEnd(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace automotive_ai
}  // namespace world

