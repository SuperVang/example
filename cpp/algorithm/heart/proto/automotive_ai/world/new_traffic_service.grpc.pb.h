// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: automotive_ai/world/new_traffic_service.proto
// Original file comments:
// Copyright 2018 AAI GmbH
//
// Controller world service
// @create time Feb 25 2018 bu yuanbo.xiang
//
#ifndef GRPC_automotive_5fai_2fworld_2fnew_5ftraffic_5fservice_2eproto__INCLUDED
#define GRPC_automotive_5fai_2fworld_2fnew_5ftraffic_5fservice_2eproto__INCLUDED

#include "automotive_ai/world/new_traffic_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace automotive_ai {
namespace world {

// The traffic service definition.
class NewTrafficService final {
 public:
  static constexpr char const* service_full_name() {
    return "automotive_ai.world.NewTrafficService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends road user vehicles
    virtual ::grpc::Status ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReportTrafficRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReportTrafficRaw(context, request, cq));
    }
    // Gets all traffic from traffic service
    virtual ::grpc::Status GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::automotive_ai::common::NewTrafficVehicles* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>> AsyncGetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>>(AsyncGetTrafficRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>> PrepareAsyncGetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>>(PrepareAsyncGetTrafficRaw(context, request, cq));
    }
    // Informing that the current stepNext call finished.
    virtual ::grpc::Status StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncStepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncStepNextEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncStepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncStepNextEndRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends road user vehicles
      virtual void ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ReportTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Gets all traffic from traffic service
      virtual void GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::common::NewTrafficVehicles* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::common::NewTrafficVehicles* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Informing that the current stepNext call finished.
      virtual void StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StepNextEnd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StepNextEnd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReportTrafficRaw(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReportTrafficRaw(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>* AsyncGetTrafficRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::automotive_ai::common::NewTrafficVehicles>* PrepareAsyncGetTrafficRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncStepNextEndRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncStepNextEndRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReportTrafficRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReportTrafficRaw(context, request, cq));
    }
    ::grpc::Status GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::automotive_ai::common::NewTrafficVehicles* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>> AsyncGetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>>(AsyncGetTrafficRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>> PrepareAsyncGetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>>(PrepareAsyncGetTrafficRaw(context, request, cq));
    }
    ::grpc::Status StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncStepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncStepNextEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncStepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncStepNextEndRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReportTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReportTraffic(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ReportTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response, std::function<void(::grpc::Status)>) override;
      void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::common::NewTrafficVehicles* response, std::function<void(::grpc::Status)>) override;
      void GetTraffic(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTraffic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::automotive_ai::common::NewTrafficVehicles* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StepNextEnd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StepNextEnd(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StepNextEnd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReportTrafficRaw(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReportTrafficRaw(::grpc::ClientContext* context, const ::automotive_ai::common::NewTrafficVehicles& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>* AsyncGetTrafficRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::automotive_ai::common::NewTrafficVehicles>* PrepareAsyncGetTrafficRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncStepNextEndRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncStepNextEndRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReportTraffic_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTraffic_;
    const ::grpc::internal::RpcMethod rpcmethod_StepNextEnd_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends road user vehicles
    virtual ::grpc::Status ReportTraffic(::grpc::ServerContext* context, const ::automotive_ai::common::NewTrafficVehicles* request, ::google::protobuf::Empty* response);
    // Gets all traffic from traffic service
    virtual ::grpc::Status GetTraffic(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::automotive_ai::common::NewTrafficVehicles* response);
    // Informing that the current stepNext call finished.
    virtual ::grpc::Status StepNextEnd(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportTraffic() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReportTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTraffic(::grpc::ServerContext* /*context*/, const ::automotive_ai::common::NewTrafficVehicles* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportTraffic(::grpc::ServerContext* context, ::automotive_ai::common::NewTrafficVehicles* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTraffic() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::automotive_ai::common::NewTrafficVehicles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTraffic(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::automotive_ai::common::NewTrafficVehicles>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StepNextEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StepNextEnd() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StepNextEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StepNextEnd(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStepNextEnd(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReportTraffic<WithAsyncMethod_GetTraffic<WithAsyncMethod_StepNextEnd<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReportTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReportTraffic() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::common::NewTrafficVehicles, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::automotive_ai::common::NewTrafficVehicles* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReportTraffic(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ReportTraffic(
        ::grpc::experimental::MessageAllocator< ::automotive_ai::common::NewTrafficVehicles, ::google::protobuf::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::automotive_ai::common::NewTrafficVehicles, ::google::protobuf::Empty>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReportTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTraffic(::grpc::ServerContext* /*context*/, const ::automotive_ai::common::NewTrafficVehicles* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportTraffic(::grpc::ServerContext* /*context*/, const ::automotive_ai::common::NewTrafficVehicles* /*request*/, ::google::protobuf::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTraffic() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::automotive_ai::common::NewTrafficVehicles>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::automotive_ai::common::NewTrafficVehicles* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTraffic(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetTraffic(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::automotive_ai::common::NewTrafficVehicles>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::automotive_ai::common::NewTrafficVehicles>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::automotive_ai::common::NewTrafficVehicles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTraffic(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::automotive_ai::common::NewTrafficVehicles* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StepNextEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StepNextEnd() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StepNextEnd(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_StepNextEnd(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StepNextEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StepNextEnd(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StepNextEnd(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ReportTraffic<ExperimentalWithCallbackMethod_GetTraffic<ExperimentalWithCallbackMethod_StepNextEnd<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReportTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportTraffic() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReportTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTraffic(::grpc::ServerContext* /*context*/, const ::automotive_ai::common::NewTrafficVehicles* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTraffic() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::automotive_ai::common::NewTrafficVehicles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StepNextEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StepNextEnd() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StepNextEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StepNextEnd(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportTraffic() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReportTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTraffic(::grpc::ServerContext* /*context*/, const ::automotive_ai::common::NewTrafficVehicles* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportTraffic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTraffic() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::automotive_ai::common::NewTrafficVehicles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTraffic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StepNextEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StepNextEnd() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StepNextEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StepNextEnd(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStepNextEnd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReportTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReportTraffic() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReportTraffic(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReportTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportTraffic(::grpc::ServerContext* /*context*/, const ::automotive_ai::common::NewTrafficVehicles* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportTraffic(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTraffic() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTraffic(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::automotive_ai::common::NewTrafficVehicles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTraffic(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StepNextEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StepNextEnd() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StepNextEnd(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StepNextEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StepNextEnd(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StepNextEnd(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportTraffic() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::automotive_ai::common::NewTrafficVehicles, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ReportTraffic<BaseClass>::StreamedReportTraffic, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportTraffic(::grpc::ServerContext* /*context*/, const ::automotive_ai::common::NewTrafficVehicles* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportTraffic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::automotive_ai::common::NewTrafficVehicles,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTraffic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTraffic() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::automotive_ai::common::NewTrafficVehicles>(std::bind(&WithStreamedUnaryMethod_GetTraffic<BaseClass>::StreamedGetTraffic, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTraffic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTraffic(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::automotive_ai::common::NewTrafficVehicles* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTraffic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::automotive_ai::common::NewTrafficVehicles>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StepNextEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StepNextEnd() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_StepNextEnd<BaseClass>::StreamedStepNextEnd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StepNextEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StepNextEnd(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStepNextEnd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReportTraffic<WithStreamedUnaryMethod_GetTraffic<WithStreamedUnaryMethod_StepNextEnd<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReportTraffic<WithStreamedUnaryMethod_GetTraffic<WithStreamedUnaryMethod_StepNextEnd<Service > > > StreamedService;
};

}  // namespace world
}  // namespace automotive_ai


#endif  // GRPC_automotive_5fai_2fworld_2fnew_5ftraffic_5fservice_2eproto__INCLUDED
